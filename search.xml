<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>デジタル社会革命がもたらすもの 組織や個人はどう生きるべきか 内容</title>
      <link href="/2020/02/16/digital_social/"/>
      <url>/2020/02/16/digital_social/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="http://www.akitacci.or.jp/cciwp/wp-content/uploads/%E6%A1%88%E5%86%85%E3%83%81%E3%83%A9%E3%82%B71223.pdf" target="_blank" rel="noopener">http://www.akitacci.or.jp/cciwp/wp-content/uploads/%E6%A1%88%E5%86%85%E3%83%81%E3%83%A9%E3%82%B71223.pdf</a></p><p>これに出ました。<br>せっかく大学にお金を払っていて将来的に全額親に返すので<br>とりあえず出ました。</p><p>最近はとりあえず行動したほうがいいことが多いので</p><p><a href="https://www.dbic.jp/people/nishino/" target="_blank" rel="noopener">https://www.dbic.jp/people/nishino/</a><br>西野さんの経歴はここにまとまっていた。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>講演会の内容は、ほぼ会社などの経営者向けだった。<br>ただ、受講している多くの高齢者は寝ていたりしていて、メモを撮る人間のほうが少なかった。</p><p>何パーセントが実際に今回の講演をもとに行動を始めるんだろうな･･･とは思った。</p><p>若い人が来たほうが良かったんじゃないだろうか･･･<br>こういうので多いのは結局こういうのを見に来ても下の人間に伝わらず、自分だけの知識にして終わり<br>などがある気がする</p><p>いやだなぁ<br>会社に行ったって、年取っている人が多くの金をせしめて、どう運営するかよりはどう今の環境を保守するかを中心に考えている気がする<br>完全にそう思い込んでいるだけなので、そうではないと思うが（思いたい）</p><h2 id="日本は最悪"><a href="#日本は最悪" class="headerlink" title="日本は最悪"></a>日本は最悪</h2><p>一時間半のうち、大部分がきちんと日本はまずいということを強く主張していた。</p><p>日本のテレビや新聞はこういうのを一切伝えないし、<br>日本はこういい！日本の良いところ世界自慢みたいなテレビが絶えない</p><p>いつまでこういう日本がトップレベルにあるみたいな話があるんだろうか</p><p>西野さんの発言で気になったのは</p><p>五感と思考力を身に着けよう、というものだった。<br>日本の教育は</p><ul><li>答えを先生が教える</li><li>点がもらえればいい</li></ul><p>という教育方針で、スウェーデンとはまったくもって方針が違うらしい。<br>その結果、会社のなかで与えられた仕事をただ行い、決断力のなく、五感のうすれた<br>思考力を見失った相槌マシーンができるらしい。</p><p>研究室のミーティングとかでも、個人的にはズバッと言ってほしいですが、日本人はいわないのが美徳なの大変だし、向いてないよね（いろいろと）</p><p>考える力をつけて、自分から行動できないとこれからは特にダメ（進歩が思っている１０倍早いので）</p><h2 id="日本ではどうしていくべきか"><a href="#日本ではどうしていくべきか" class="headerlink" title="日本ではどうしていくべきか"></a>日本ではどうしていくべきか</h2><ul><li>五感を使って考える</li><li>「作業」ではなく「創造」をする</li><li>大きい視点で見て細部を気にしない</li><li>悪口・忖度をやめた大人になる</li><li>自分で考えて行動する</li></ul><p>全体的には、考えて五感で様々な環境を感じ取って行動しようという内容だった。<br>悪口や忖度なども世界的にみてダメなので、大人として考えよう</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>環境って大きいなぁって思った。<br>多くの家庭・学校、いろいろなものが環境によって左右されて<br>その環境で人間の考え方が決まる。</p><p>そうするといつまでも日本にいると、考え方が凝り固まるんだなぁってなってしまった。</p><p>考える力とか行動力ってどう身につくんだろうなぁ･･･</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 講演会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-02-11</title>
      <link href="/2020/02/11/2020-02-11/"/>
      <url>/2020/02/11/2020-02-11/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>ゲーム理論入門本読み切る <ul><li>ガバ読み</li></ul></li><li>バイト</li><li>Streak</li><li>ゆきこだ</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>明日からPomodoroシートで頑張ってみよう</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>受け答え</li><li>シート印刷</li><li>群知能研究</li><li>ゲーム理論本</li><li>強化学習本</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-02-10</title>
      <link href="/2020/02/10/2020-02-10/"/>
      <url>/2020/02/10/2020-02-10/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>ABCバチャ</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>うまく時間を使おう･･･<br>完璧主義をやめないと一生だめになる</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>ゲーム理論入門</li><li>CVPR実装</li><li>群知能アイディア</li><li>ゆきこだ236</li><li>競プロ復習</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-02-06</title>
      <link href="/2020/02/06/2020-02-06/"/>
      <url>/2020/02/06/2020-02-06/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>卒論発表</li><li>Streak</li><li>バイト</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>気持ち切り替えて頑張っていこうね</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>競プロ復習</li><li>服買う</li><li>電車きっぷ買う</li><li>本買う</li><li>5時大学</li><li>追いコン</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-02-05</title>
      <link href="/2020/02/05/2020-02-05/"/>
      <url>/2020/02/05/2020-02-05/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>発表練習</li><li>こどふぉDiv3</li><li>バイト</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>明日で工事完了です･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>工事完了です･･･</li><li>競プロ復習</li><li>強化学習</li><li>日程建てる</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-02-02</title>
      <link href="/2020/02/02/2020-02-02/"/>
      <url>/2020/02/02/2020-02-02/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>LeetCode</li><li>バイト</li><li>駒場コン</li><li>セグ木notコン</li><li>こどふぉ616</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>競プロができなくなっている</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>Python強化学習</li><li>発表練習</li><li>LeetCode記事</li><li>駒場コン復習</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-02-01</title>
      <link href="/2020/02/01/2020-02-01/"/>
      <url>/2020/02/01/2020-02-01/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>Python強化学習Day2</li><li>バイト</li><li>YukiCoder復習</li><li>AtCoderStreak</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>もっとうまく時間使おう<br>ちゃんとPomodoroして、それ以外はメモしよう</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>Python強化学習</li><li>LeetCode174</li><li>HackerRank1</li><li>HackerRank2</li><li>Codeforces616</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-30</title>
      <link href="/2020/01/30/2020-01-30/"/>
      <url>/2020/01/30/2020-01-30/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>卒論修正</li><li>スライド修正</li><li>Python強化学習１</li><li>こどふぉ復習</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>怖いなぁコロナウイルス</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>発表練習</li><li>Python強化学習</li><li>先生にメールする</li><li>YukiCoder</li><li>（群知能）</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-26</title>
      <link href="/2020/01/26/2020-01-26/"/>
      <url>/2020/01/26/2020-01-26/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>バイト</li><li>LeetCode</li><li>おばあちゃん家</li><li>こどふぉ復習</li><li>ABC153</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>今日あんまり進まなかったなぁ<br>体調も最近崩しがちなので気をつけないと･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>リポジトリ作成・修正</li><li>本進める</li><li>スライド作成</li><li>ABC復習</li><li>MT</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-25</title>
      <link href="/2020/01/25/2020-01-25/"/>
      <url>/2020/01/25/2020-01-25/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>本実装＆Qiita投稿</li><li>バイト</li><li>競プロ復習</li><li>LeetCode</li><li>SRM</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>群知能と人工知能<br>どう覚えようかなぁ･･･</p><p>論文読んだら<br>めんどいけど必ず図や内容も作成しよう･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>本読み</li><li>バイト</li><li>LeetCode</li><li>ABC153</li><li>MMを覗く</li><li>CS188</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-24</title>
      <link href="/2020/01/24/2020-01-24/"/>
      <url>/2020/01/24/2020-01-24/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>スライド修正</li><li>acopyプラグインなど作成・お手入れ</li><li>CS188学習</li><li>競プロ</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>強化学習などはとりあえず後回し（あっちでやればよい、あとでどう勉強すべきか聞いてみる）</p><p>とりあえず今の本を続けていこう<br>実装を必ず論文読んだらしよう（データも軽く取って図を作る　これによって力がつく）</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>本実装</li><li>CS188</li><li>競プロ復習</li><li>TCO</li><li>LeetCode</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS188 10/04 Bays Network</title>
      <link href="/2020/01/24/cs188_bays/"/>
      <url>/2020/01/24/cs188_bays/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://www.youtube.com/watch?v=T4l6ltMMcec" target="_blank" rel="noopener">https://www.youtube.com/watch?v=T4l6ltMMcec</a><br><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec13/FA18_cs188_lecture13_bayes_nets_1pp.pdf" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec13/FA18_cs188_lecture13_bayes_nets_1pp.pdf</a><br><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/</a></p><h2 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a>Independence</h2><p>$2$つの事象が独立していることを表す。</p><p>このとき</p><p>$\forall x, y \ P(x, y)=P(x)P(y)$<br>が成り立つ。<br>ベン図ならそれぞれ円が重ならない。</p><p>$x \amalg y$と表す。</p><p>これが分かることで、事象が相互作用があるのか分かる。</p><h2 id="Conditional-Independence"><a href="#Conditional-Independence" class="headerlink" title="Conditional Independence"></a>Conditional Independence</h2><p>$X$が$Z$という前提が与えられたとき$Y$と独立なとき</p><p>$\forall x, y, z \ P(x, y| z) =P(x|z)P(y|z)$<br>となればXとYは$Z$という事前条件に対して独立である。</p><p>これが分かるとよりシンプルな形で表せる。</p><h2 id="ベイズネット"><a href="#ベイズネット" class="headerlink" title="ベイズネット"></a>ベイズネット</h2><p>日本語だとベイジアンネットワークという。</p><p>確率変数をノードとして、それぞれの相互関係を有向グラフとして表す。<br>親が原因で、子が結果を表す。</p><h3 id="Notation"><a href="#Notation" class="headerlink" title="Notation"></a>Notation</h3><ul><li>Node<ul><li>変数</li></ul></li><li>Arc<ul><li>相互作用</li><li><strong>直接</strong>の相互作用があるなら線を引く</li><li>条件付き確率で表す。</li></ul></li></ul><h3 id="Semantics"><a href="#Semantics" class="headerlink" title="Semantics"></a>Semantics</h3><p>Xの確率は親の値$(a_1, ,,,, a_n)$を用いて</p><p>$P(X|a_1, …, a_n)$として、各ノードの確率が与えられる.</p><p>$P(x_1, …, x_n) = \prod_{i=1}^n P(x_i| \textit{parents}(X_i))$<br>と表される。つまり、すべてのノードで親の確率を使って自分の値を計算する（再帰っぽい）</p><h3 id="証明"><a href="#証明" class="headerlink" title="証明"></a>証明</h3><p>$P(x_1, …, x_n) = \prod_{i=1}^n P(x_i|x_1, …, x_{i-1})$</p><p>$P(x_i|x_1, …, x_{i-1}) = P(x_i|parents(x_i))$</p><p>よって、これらを結合すれば<br>$P(x_1, …, x_n) = \prod_{i=1}^n P(x_i| \textit{parents}(X_i))$<br>となる。</p><h3 id="Causality"><a href="#Causality" class="headerlink" title="Causality"></a>Causality</h3><p>因果性は成り立ってなくて良い。<br>矛盾のあるようなつなぎ方でも、確率分布は与えられるためループがなければ正しい（らしい）</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> CS188 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS188 10/02 Probablistic</title>
      <link href="/2020/01/24/cs188_10_02/"/>
      <url>/2020/01/24/cs188_10_02/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/</a><br><a href="https://www.youtube.com/watch?v=sMNbLXsvRig" target="_blank" rel="noopener">https://www.youtube.com/watch?v=sMNbLXsvRig</a></p><h2 id="確率変数"><a href="#確率変数" class="headerlink" title="確率変数"></a>確率変数</h2><p>確率モデルにおける、不確定な事象を表す変数のこと。<br>普通の変数とは異なり大文字で表され、確率分布が与えられる。</p><p>確率変数は、種類ごとに特定のドメイン内の値を取る。<br>例えば、$T =$(cold, hot)などである。</p><p>ある意味、配列とも言っていい。</p><h2 id="Probability-Distribution"><a href="#Probability-Distribution" class="headerlink" title="Probability Distribution"></a>Probability Distribution</h2><p>確率分布。</p><p>それぞれの確率変数には確率がそれぞれ与えられる。<br>$P(X)$は確率変数$X$がとる確率の分布を表す。</p><p>これは事象$X$に関する確率が与えられた二次元テーブルと考えることができる。</p><p>$P(X = rain)$とかくと、確率変数$X$が$rain$のときの確率を表し<br>$P(rain)$と同義である。（自明に$X$と分かるなら省略していい、という意味）</p><h2 id="Joint-Distribution"><a href="#Joint-Distribution" class="headerlink" title="Joint Distribution"></a>Joint Distribution</h2><p>同時確率分布。</p><p>複数の確率変数$X_1, …, X_n$が同時に起こる確率を表すテーブル。<br>各確率変数が$d$個のドメインを取るとすると、$d^n$までテーブルの行が膨れ上がる。</p><p>$P(X_1, X_2, …, X_n)$は$n$個の確率変数の同時確率分布であり<br>$P(X_1=x_1, X_2=x_2, …, X_n = x_n$)はこのような変数が実際に値を取るときの確率が分かる。</p><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>事象。<br>事象に対して、確率が与えられる。</p><p>事象$E$の起こる確率は</p><p>$P(E) = \sum_{x_1, …, x_n \in E} P(x_1, …, x_N)$と表される。</p><h2 id="Marginal-Distribution"><a href="#Marginal-Distribution" class="headerlink" title="Marginal Distribution"></a>Marginal Distribution</h2><p>周辺分布。</p><p>Jointテーブルからある変数のみに着目して、テーブルのサブテーブルを切り出すこと。<br>SQLでいうWhereに近い。</p><h2 id="Conditional-Distribution"><a href="#Conditional-Distribution" class="headerlink" title="Conditional Distribution"></a>Conditional Distribution</h2><p>$P(x | y) = \frac{P(x, y)}{P(y)}$</p><h2 id="Conditional-Distribution-1"><a href="#Conditional-Distribution-1" class="headerlink" title="Conditional Distribution"></a>Conditional Distribution</h2><p>条件付き確率分布?<br>日本語のでの定義がない？</p><p>Joint Distributionから一部の条件でWhereで切り出したテーブル。</p><p>取り出したあとは、合計をとり、確率の合計が１になるように正規化する。</p><h2 id="Probablistic-Inference"><a href="#Probablistic-Inference" class="headerlink" title="Probablistic Inference"></a>Probablistic Inference</h2><p>確率はすでに与えられているものとする。</p><p>このとき、足りない確率から望んでいる確率を推論すること。</p><ul><li>Evidence Variable<ul><li>わかっている変数$E_1, …, E_k = e_1, …, e_k$</li></ul></li><li>Query Variable<ul><li>知りたい変数 $Q$</li></ul></li><li>Hidden Variable <ul><li>わかっていない変数</li></ul></li></ul><p>上記はすべてもともと$X_1,…,X_N$である。</p><p>このときの$P(Q|e_1, …, e_k)$を推論する。</p><p>これはテーブルを結合すればよい。そしてあとは正規化する。</p><h2 id="Product-Rule"><a href="#Product-Rule" class="headerlink" title="Product Rule"></a>Product Rule</h2><p>$P(y) \cdot P(x |y) = P(x, y)$</p><p>条件付き確率の式変形。</p><h2 id="Chain-Rule"><a href="#Chain-Rule" class="headerlink" title="Chain Rule"></a>Chain Rule</h2><p>微分みたいなもの。</p><p>$P(x_1,…,x_n) = P(x_1)P(x_2|x_1)P(x_3|x_1, x_2)…$</p><p>$P(x_1,…,x_n) = \prod_i P(x_i | x_1, …, x_{i-1})$</p><h2 id="ベイス"><a href="#ベイス" class="headerlink" title="ベイス"></a>ベイス</h2><p>$P(x | y) = \frac{P(x, y)}{P(y)}P(x)$</p><p>原因と結果を入れ替える。<br>結果から原因がどれぐらい起きるかを推定できる。</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> CS188 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-23</title>
      <link href="/2020/01/23/2020-01-23/"/>
      <url>/2020/01/23/2020-01-23/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>VRP調べる　よくわかんない</li><li>スライド修正</li><li>バイト</li><li>Streakをつなぐ</li><li>CS188</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>VRPを明日実装する</p><p>強化学習は筑波に行ってからでいいんじゃないだろうか･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>VRP実装</li><li>スライド修正</li><li>CS188</li><li>競プロ復習</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-22</title>
      <link href="/2020/01/22/2020-01-22/"/>
      <url>/2020/01/22/2020-01-22/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>mTSPの実装</li><li>Streak</li><li>ブログの改修</li><li>こどふぉ夜</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>何をやればいいのかわかんなくなってきたな</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>群知能論文読み + 実装</li><li>スライド修正</li><li>競プロ復習</li><li>動画勉強</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-opt法を実装してみる</title>
      <link href="/2020/01/22/2_opt/"/>
      <url>/2020/01/22/2_opt/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>NP困難な問題の一つに巡回セールスマン問題というものがあります。</p><p>これは、$N$個の頂点を順番に訪問するときにかかる最小の移動コストを求める問題です。<br>これは全探索すると$O(N!)$かかり、とてつもない時間がかかってしまいます。（というか解けません･･･）</p><p>そこで、近似解を求める多くの手法が開発されており、その一つに<code>2-opt</code>という手法が開発されています。</p><h2 id="2-opt"><a href="#2-opt" class="headerlink" title="2-opt"></a>2-opt</h2><p>2-optは、局所探索法の一つです。<br>局所探索法とは、現在の解をより良くなるようにGreedyに改良していく手法です。<br>いわゆる<code>山登り法</code>の一つになります。</p><p>2-optでは、巡回セールスマンパスの２つの辺を選んで、移動する順番を入れ替える手法です。<br>もし、入れ替えたほうの移動のほうがより合計移動コストが小さくなるなら、Greedyに入れ替えることを繰り返します。</p><h2 id="2-optのイメージ"><a href="#2-optのイメージ" class="headerlink" title="2-optのイメージ"></a>2-optのイメージ</h2><p><img src="IMG_0374.jpg" alt></p><p>上記の画像を用いて、説明をしていきます。</p><p>ノード$i, j(i < j)$から次のエッジ$(i, i + 1)$, $(j, j + 1)$を交換することにします。<br>もし交換するなら$(i, j), (i + 1, j+1)$となるようにします。</p><p>まず、もともとのコストは<br>$distA = d(i, i+ 1), distB=d(j, j + 1)$だけ移動にかかっていました。<br>ここで、これら以外のパスのコストは、今回の2-optのスワップを行っても影響しないため考えません。</p><p>そして、もしスワップするとすれば増えるコストは<br>$distC = d(i, j), distD = d(i + 1, j + 1)$になります。</p><p>よって、もし$distA + distB > distC + distD$ならば<br>スワップをしたほうが全体のパスのコストが小さくなるためスワップするべきです。</p><p>ここで、問題になるのがスワップをそのまま行うと<br>つまり$i$が向かう次のノードを$j$に、<br>$i+1$が向かう次のノードを$j + 1$にしてしまうと、<br>途中からパスが逆流してしまいます。<br>合計コスト的には問題ないですが、できればきちんと移動パス通りに構築するべきです。</p><p>そこで、画像右のようにすることを考えます。<br>頂点$i$は$j$に向かい、そのあとは順番に$i+1$の方向へ向かって<br>$i+1$から$j+1$に向かいたいです。</p><p>これは、もともと$i, i + 1, …,j-1, j, j+1$のように移動していたのが<br>$i, j, j-1, j-2, …, i + 1, j+1$のように移動するようになっています。</p><p>これは<code>path[i + 1, j + 1)</code>の区間を反転させることと同義です。</p><p>よって、区間$[i, j + 1)$を反転させればきちんと意味のあるパスとして2-optを行うことができます。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p><a href="https://github.com/Ganariya/MTSP_ACO" target="_blank" rel="noopener">GitHubリンク</a></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tsplib95</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx</span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line">problem = tsplib95.load_problem(<span class="hljs-string">'bays29.tsp'</span>)</span><br><span class="line">G = problem.get_graph()</span><br><span class="line"></span><br><span class="line">n = len(G.nodes)</span><br><span class="line"></span><br><span class="line">s = <span class="hljs-number">1</span></span><br><span class="line">v = s</span><br><span class="line">nodes = [v]</span><br><span class="line">path = []</span><br><span class="line">cost = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 最近傍法</span></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n - <span class="hljs-number">1</span>):</span><br><span class="line">    candidates = []</span><br><span class="line">    <span class="hljs-keyword">for</span> to <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> to <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> nodes:</span><br><span class="line">            candidates.append((G.edges[v, to][<span class="hljs-string">'weight'</span>], to))</span><br><span class="line">    candidates.sort()</span><br><span class="line">    next_node = candidates[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]</span><br><span class="line">    cost += candidates[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]</span><br><span class="line">    nodes.append(next_node)</span><br><span class="line">    path.append((v, next_node))</span><br><span class="line">    v = next_node</span><br><span class="line">path.append((v, s))</span><br><span class="line">cost += G.edges[v, s][<span class="hljs-string">'weight'</span>]</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">_, ax = plt.subplots()</span><br><span class="line">pos = problem.display_data <span class="hljs-keyword">or</span> problem.node_coords</span><br><span class="line">nx.draw_networkx_nodes(G, pos=pos, ax=ax)</span><br><span class="line">nx.draw_networkx_labels(G, pos=pos, labels={i: str(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(G.nodes) + <span class="hljs-number">1</span>)}, font_size=<span class="hljs-number">8</span>, font_color=<span class="hljs-string">'white'</span>)</span><br><span class="line">nx.draw_networkx_edges(G, pos=pos, edgelist=path, arrows=<span class="hljs-literal">True</span>)</span><br><span class="line">ax.tick_params(left=<span class="hljs-literal">True</span>, bottom=<span class="hljs-literal">True</span>, labelleft=<span class="hljs-literal">True</span>, labelbottom=<span class="hljs-literal">True</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 2-swap</span></span><br><span class="line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">10000</span>):</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">        i = random.randint(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)</span><br><span class="line">        j = random.randint(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> i != j:</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">    <span class="hljs-keyword">if</span> i > j:</span><br><span class="line">        i, j = j, i</span><br><span class="line"></span><br><span class="line">    distA = G.edges[nodes[i], nodes[i + <span class="hljs-number">1</span>]][<span class="hljs-string">'weight'</span>]</span><br><span class="line">    distB = G.edges[nodes[j], nodes[(j + <span class="hljs-number">1</span>) % n]][<span class="hljs-string">'weight'</span>]</span><br><span class="line">    distC = G.edges[nodes[i], nodes[j]][<span class="hljs-string">'weight'</span>]</span><br><span class="line">    distD = G.edges[nodes[i + <span class="hljs-number">1</span>], nodes[(j + <span class="hljs-number">1</span>) % n]][<span class="hljs-string">'weight'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># コストが小さくなるなら</span></span><br><span class="line">    <span class="hljs-keyword">if</span> distA + distB > distC + distD:</span><br><span class="line">        print(cost, i, j, nodes[i], nodes[j])</span><br><span class="line">        nodes[i + <span class="hljs-number">1</span>:j + <span class="hljs-number">1</span>] = reversed(nodes[i + <span class="hljs-number">1</span>: j + <span class="hljs-number">1</span>])</span><br><span class="line">        cost += (distC + distD - distA - distB)</span><br><span class="line">        path = []</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):</span><br><span class="line">            path.append((nodes[i], nodes[(i + <span class="hljs-number">1</span>) % n]))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># 描画</span></span><br><span class="line">        plt.figure()</span><br><span class="line">        _, ax = plt.subplots()</span><br><span class="line">        pos = problem.display_data <span class="hljs-keyword">or</span> problem.node_coords</span><br><span class="line">        nx.draw_networkx_nodes(G, pos=pos, ax=ax)</span><br><span class="line">        nx.draw_networkx_labels(G, pos=pos, labels={i: str(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(G.nodes) + <span class="hljs-number">1</span>)}, font_size=<span class="hljs-number">8</span>, font_color=<span class="hljs-string">'white'</span>)</span><br><span class="line">        nx.draw_networkx_edges(G, pos=pos, edgelist=path, arrows=<span class="hljs-literal">True</span>)</span><br><span class="line">        ax.tick_params(left=<span class="hljs-literal">True</span>, bottom=<span class="hljs-literal">True</span>, labelleft=<span class="hljs-literal">True</span>, labelbottom=<span class="hljs-literal">True</span>)</span><br><span class="line">        plt.show()</span><br></pre></td></tr></tbody></table></figure><p>まず、最近傍法を先に行ってよりGreedyにパスを構築し<br>NetworkXとMatplotlibで描画を行っています。</p><p>その後、2-optを実行してよりコストが小さくなるならエッジのスワップを行っています。</p><p>配列ごと反転させてよいのが非直感的ですね･･･</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> ACO </tag>
            
            <tag> 群知能 </tag>
            
            <tag> アルゴリズム </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-21</title>
      <link href="/2020/01/21/2020-01-21/"/>
      <url>/2020/01/21/2020-01-21/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>強化学習のお勉強<ul><li>方策勾配法はさっぱりですが</li><li>とりあえずSpinning Upにうつる</li><li>あとは実装だぁ〜</li></ul></li><li>mTSPのお気持ちになる<ul><li>なにこれ  </li></ul></li><li>群知能の勉強<ul><li>少しずつ実装していくしかないんだなぁ</li></ul></li><li>Streak</li><li>こどふぉ復習</li><li>バイト</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>Spinning Upをやりきれば力がつくのかな</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>Spinning Up</li><li>mTSPACO実装</li><li>競プロ復習</li><li>こどふぉDiv3夜</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-20</title>
      <link href="/2020/01/20/2020-01-20/"/>
      <url>/2020/01/20/2020-01-20/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>DeepLizard</li><li>卒論を読む</li><li>ABC復習</li><li>灘中コン</li><li>むずかしい･･･ </li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>群知能と人工知能を極めたいけど難しい･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>強化学習本(これ絶対にやりきる　買う)</li><li>群知能実装</li><li>競プロ復習</li><li>バイト</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepLizard Deep Q Network</title>
      <link href="/2020/01/20/deeplizard_q/"/>
      <url>/2020/01/20/deeplizard_q/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>DeepLizardのReinforcement　Learningをやりきった。<br>途中ちょっと？な部分もあったけど、CS188の前半を見た後ならだいたい理解できた。</p><p>あとは日本語の本に入っていく感じかなぁ･･･</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> gym</span><br><span class="line"><span class="hljs-keyword">import</span> math</span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple</span><br><span class="line"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> count</span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span><br><span class="line"><span class="hljs-keyword">import</span> torch</span><br><span class="line"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn</span><br><span class="line"><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim</span><br><span class="line"><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F</span><br><span class="line"><span class="hljs-keyword">import</span> torchvision.transforms <span class="hljs-keyword">as</span> T</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">is_ipython = <span class="hljs-string">'inline'</span> <span class="hljs-keyword">in</span> matplotlib.get_backend()</span><br><span class="line"><span class="hljs-keyword">if</span> is_ipython: <span class="hljs-keyword">from</span> IPython <span class="hljs-keyword">import</span> display</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DQN</span><span class="hljs-params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, img_height, img_width)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.fc1 = nn.Linear(in_features=img_height * img_width * <span class="hljs-number">3</span>, out_features=<span class="hljs-number">24</span>)</span><br><span class="line">        self.fc2 = nn.Linear(in_features=<span class="hljs-number">24</span>, out_features=<span class="hljs-number">32</span>)</span><br><span class="line">        self.out = nn.Linear(in_features=<span class="hljs-number">32</span>, out_features=<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, t)</span>:</span></span><br><span class="line">        t = t.flatten(start_dim=<span class="hljs-number">1</span>)</span><br><span class="line">        t = F.relu(self.fc1(t))</span><br><span class="line">        t = F.relu(self.fc2(t))</span><br><span class="line">        t = self.out(t)</span><br><span class="line">        <span class="hljs-keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">Experience = namedtuple(<span class="hljs-string">'Experience'</span>, (<span class="hljs-string">'state'</span>, <span class="hljs-string">'action'</span>, <span class="hljs-string">'next_state'</span>, <span class="hljs-string">'reward'</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">e = Experience(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># capacityが蓄えるメモリ数</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReplayMemory</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, capacity)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.memory = []</span><br><span class="line">        self.push_count = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, experience)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(self.memory) < self.capacity:</span><br><span class="line">            self.memory.append(experience)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            self.memory[self.push_count % self.capacity] = experience</span><br><span class="line">        self.push_count += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sample</span><span class="hljs-params">(self, batch_size)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> random.sample(self.memory, batch_size)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">can_provide_sample</span><span class="hljs-params">(self, batch_size)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> len(self.memory) >= batch_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EpsilonGreedyStrategy</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, start, end, decay)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.end = end</span><br><span class="line">        self.decay = decay</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_exploration_rate</span><span class="hljs-params">(self, current)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.end + (self.start - self.end) * math.exp(<span class="hljs-number">-1</span> * current * self.decay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">eps = EpsilonGreedyStrategy(<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.01</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):</span><br><span class="line">    print(i, eps.get_exploration_rate(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Agent</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, strategy, num_actions, device)</span>:</span></span><br><span class="line">        self.current_step = <span class="hljs-number">0</span></span><br><span class="line">        self.strategy = strategy</span><br><span class="line">        self.num_actions = num_actions</span><br><span class="line">        self.device = device</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select_action</span><span class="hljs-params">(self, state, policy_net)</span>:</span></span><br><span class="line">        rate = self.strategy.get_exploration_rate(self.current_step)</span><br><span class="line">        self.current_step += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> rate > random.random():</span><br><span class="line">            action = random.randrange(self.num_actions)</span><br><span class="line">            <span class="hljs-keyword">return</span> torch.tensor([action]).to(self.device)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">with</span> torch.no_grad():</span><br><span class="line">                <span class="hljs-keyword">return</span> policy_net(state).argmax(dim=<span class="hljs-number">1</span>).to(self.device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># CartPoleEnvManager</span></span><br><span class="line"><span class="hljs-comment"># 環境を内包し、画像処理なども行う</span></span><br><span class="line"><span class="hljs-comment"># インターフェイスがクリーンになる</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartPoleEnvManager</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, device)</span>:</span></span><br><span class="line">        self.device = device</span><br><span class="line">        self.env = gym.make(<span class="hljs-string">'CartPole-v0'</span>).unwrapped</span><br><span class="line">        self.env.reset()</span><br><span class="line">        self.current_screen = <span class="hljs-literal">None</span></span><br><span class="line">        self.done = <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reset</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.env.reset()</span><br><span class="line">        self.current_screen = <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.env.close()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># numpy arrayが帰ってくる？</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">render</span><span class="hljs-params">(self, mode=<span class="hljs-string">'human'</span>)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.env.render(mode)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">num_actions_available</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.env.action_space.n</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">take_action</span><span class="hljs-params">(self, action)</span>:</span></span><br><span class="line">        _, reward, self.done, _ = self.env.step(action.item())</span><br><span class="line">        <span class="hljs-keyword">return</span> torch.tensor([reward], device=self.device)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">just_starting</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.current_screen <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_state</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.just_starting() <span class="hljs-keyword">or</span> self.done:</span><br><span class="line">            self.current_screen = self.get_processed_screen()</span><br><span class="line">            black_screen = torch.zeros_like(self.current_screen)</span><br><span class="line">            <span class="hljs-keyword">return</span> black_screen</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            s1 = self.current_screen</span><br><span class="line">            s2 = self.get_processed_screen()</span><br><span class="line">            self.current_screen = s2</span><br><span class="line">            <span class="hljs-keyword">return</span> s2 - s1</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_screen_height</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        screen = self.get_processed_screen()</span><br><span class="line">        <span class="hljs-keyword">return</span> screen.shape[<span class="hljs-number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_screen_width</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        screen = self.get_processed_screen()</span><br><span class="line">        <span class="hljs-keyword">return</span> screen.shape[<span class="hljs-number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_processed_screen</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        screen = self.render(<span class="hljs-string">'rgb_array'</span>).transpose((<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># PyTorch expects CHW</span></span><br><span class="line">        screen = self.crop_screen(screen)</span><br><span class="line">        <span class="hljs-keyword">return</span> self.transform_screen_data(screen)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">crop_screen</span><span class="hljs-params">(self, screen)</span>:</span></span><br><span class="line">        screen_height = screen.shape[<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">        top = int(screen_height * <span class="hljs-number">0.4</span>)</span><br><span class="line">        bottom = int(screen_height * <span class="hljs-number">0.8</span>)</span><br><span class="line">        screen = screen[:, top:bottom, :]</span><br><span class="line">        <span class="hljs-keyword">return</span> screen</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transform_screen_data</span><span class="hljs-params">(self, screen)</span>:</span></span><br><span class="line">        screen = np.ascontiguousarray(screen, dtype=np.float32) / <span class="hljs-number">255</span></span><br><span class="line">        screen = torch.from_numpy(screen)</span><br><span class="line"></span><br><span class="line">        resize = T.Compose([</span><br><span class="line">            T.ToPILImage(),</span><br><span class="line">            T.Resize((<span class="hljs-number">40</span>, <span class="hljs-number">90</span>)),</span><br><span class="line">            T.ToTensor()</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> resize(screen).unsqueeze(<span class="hljs-number">0</span>).to(self.device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="hljs-string">'cuda'</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">'cpu'</span>)</span><br><span class="line">em = CartPoleEnvManager(device)</span><br><span class="line">em.reset()</span><br><span class="line">screen = em.render(<span class="hljs-string">'rgb_array'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">screen = em.get_processed_screen()</span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(screen.squeeze(<span class="hljs-number">0</span>).permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).cpu(), interpolation=<span class="hljs-string">'none'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">screen = em.get_state()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(screen.squeeze(<span class="hljs-number">0</span>).permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).cpu(), interpolation=<span class="hljs-string">'none'</span>)</span><br><span class="line">plt.title(<span class="hljs-string">'Starting state example'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):</span><br><span class="line">    em.take_action(torch.tensor([<span class="hljs-number">1</span>]))</span><br><span class="line">screen = em.get_state()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(screen.squeeze(<span class="hljs-number">0</span>).permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).cpu(), interpolation=<span class="hljs-string">'none'</span>)</span><br><span class="line">plt.title(<span class="hljs-string">'Non starting state example'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot</span><span class="hljs-params">(values, moving_avg_period)</span>:</span></span><br><span class="line">    plt.figure(<span class="hljs-number">2</span>)</span><br><span class="line">    plt.clf()</span><br><span class="line">    plt.title(<span class="hljs-string">'Training...'</span>)</span><br><span class="line">    plt.xlabel(<span class="hljs-string">'Episode'</span>)</span><br><span class="line">    plt.ylabel(<span class="hljs-string">'Duration'</span>)</span><br><span class="line">    plt.plot(values)</span><br><span class="line"></span><br><span class="line">    moving_avg = get_moving_average(moving_avg_period, values)</span><br><span class="line">    plt.plot(moving_avg)</span><br><span class="line">    plt.pause(<span class="hljs-number">0.001</span>)</span><br><span class="line">    print(<span class="hljs-string">"Episode"</span>, len(values), <span class="hljs-string">"\n"</span>, \</span><br><span class="line">          moving_avg_period, <span class="hljs-string">"episode moving avg:"</span>, moving_avg[<span class="hljs-number">-1</span>])</span><br><span class="line">    <span class="hljs-keyword">if</span> is_ipython: display.clear_output(wait=<span class="hljs-literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_moving_average</span><span class="hljs-params">(period, values)</span>:</span></span><br><span class="line">    values = torch.tensor(values, dtype=torch.float)</span><br><span class="line">    <span class="hljs-keyword">if</span> len(values) >= period:</span><br><span class="line">        moving_avg = values.unfold(dimension=<span class="hljs-number">0</span>, size=period, step=<span class="hljs-number">1</span>) \</span><br><span class="line">            .mean(dim=<span class="hljs-number">1</span>).flatten(start_dim=<span class="hljs-number">0</span>)</span><br><span class="line">        moving_avg = torch.cat((torch.zeros(period - <span class="hljs-number">1</span>), moving_avg))</span><br><span class="line">        <span class="hljs-keyword">return</span> moving_avg.numpy()</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        moving_avg = torch.zeros(len(values))</span><br><span class="line">        <span class="hljs-keyword">return</span> moving_avg.numpy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">plot(np.random.rand(<span class="hljs-number">300</span>), <span class="hljs-number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line">batch_size = <span class="hljs-number">256</span></span><br><span class="line">gamma = <span class="hljs-number">0.999</span></span><br><span class="line">eps_start = <span class="hljs-number">1</span></span><br><span class="line">eps_end = <span class="hljs-number">0.01</span></span><br><span class="line">eps_decay = <span class="hljs-number">0.001</span></span><br><span class="line">target_update = <span class="hljs-number">10</span></span><br><span class="line">memory_size = <span class="hljs-number">100000</span></span><br><span class="line">lr = <span class="hljs-number">0.001</span></span><br><span class="line">num_episodes = <span class="hljs-number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">device = <span class="hljs-string">'cpu'</span></span><br><span class="line">em = CartPoleEnvManager(device)</span><br><span class="line">strategy = EpsilonGreedyStrategy(eps_start, eps_end, eps_decay)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">agent = Agent(strategy, em.num_actions_available(), device)</span><br><span class="line">memory = ReplayMemory(memory_size)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">policy_net = DQN(em.get_screen_height(), em.get_screen_width())</span><br><span class="line">target_net = DQN(em.get_screen_height(), em.get_screen_width())</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">## 重みとバイアスのコピー</span></span><br><span class="line">target_net.load_state_dict(policy_net.state_dict())</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 評価にして訓練しない</span></span><br><span class="line">target_net.eval()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">optimizer = optim.Adam(params=policy_net.parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">episode_durations = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extract_tensors</span><span class="hljs-params">(experiences)</span>:</span></span><br><span class="line">    <span class="hljs-comment"># Convert batch of Experiences to Experience of batches</span></span><br><span class="line">    batch = Experience(*zip(*experiences))</span><br><span class="line"></span><br><span class="line">    t1 = torch.cat(batch.state)</span><br><span class="line">    t2 = torch.cat(batch.action)</span><br><span class="line">    t3 = torch.cat(batch.reward)</span><br><span class="line">    t4 = torch.cat(batch.next_state)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> (t1, t2, t3, t4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QValues</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    device = <span class="hljs-string">'cpu'</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># q-valueを返す</span></span><br><span class="line"><span class="hljs-meta">    @staticmethod</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_current</span><span class="hljs-params">(policy_net, states, actions)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> policy_net(states).gather(dim=<span class="hljs-number">1</span>, index=actions.unsqueeze(<span class="hljs-number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @staticmethod</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_next</span><span class="hljs-params">(target_net, next_states)</span>:</span></span><br><span class="line">        final_state_locations = next_states.flatten(start_dim=<span class="hljs-number">1</span>) \</span><br><span class="line">            .max(dim=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>].eq(<span class="hljs-number">0</span>).type(torch.bool)</span><br><span class="line">        non_final_state_locations = (final_state_locations == <span class="hljs-literal">False</span>)</span><br><span class="line">        non_final_states = next_states[non_final_state_locations]</span><br><span class="line">        batch_size = next_states.shape[<span class="hljs-number">0</span>]</span><br><span class="line">        values = torch.zeros(batch_size).to(QValues.device)</span><br><span class="line">        values[non_final_state_locations] = target_net(non_final_states).max(dim=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>].detach()</span><br><span class="line">        <span class="hljs-keyword">return</span> values</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> episode <span class="hljs-keyword">in</span> range(num_episodes):</span><br><span class="line">    em.reset()</span><br><span class="line">    state = em.get_state()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> timestep <span class="hljs-keyword">in</span> count():</span><br><span class="line">        action = agent.select_action(state, policy_net)</span><br><span class="line">        reward = em.take_action(action)</span><br><span class="line">        next_state = em.get_state()</span><br><span class="line">        memory.push(Experience(state, action, next_state, reward))</span><br><span class="line">        state = next_state</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> memory.can_provide_sample(batch_size):</span><br><span class="line">            experiences = memory.sample(batch_size)</span><br><span class="line">            states, actions, rewards, next_states = extract_tensors(experiences)</span><br><span class="line">            current_q_values = QValues.get_current(policy_net, states, actions)</span><br><span class="line">            next_q_values = QValues.get_next(target_net, next_states)</span><br><span class="line">            target_q_values = (next_q_values * gamma) + rewards</span><br><span class="line"></span><br><span class="line">            loss = F.mse_loss(current_q_values, target_q_values.unsqueeze(<span class="hljs-number">1</span>))</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> em.done:</span><br><span class="line">            episode_durations.append(timestep)</span><br><span class="line">            plot(episode_durations, <span class="hljs-number">100</span>)</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> episode % target_update == <span class="hljs-number">0</span>:</span><br><span class="line">        target_net.load_state_dict(policy_net.state_dict())</span><br><span class="line"></span><br><span class="line">em.close()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> DeepLizard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-19</title>
      <link href="/2020/01/19/2020-01-19/"/>
      <url>/2020/01/19/2020-01-19/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>バイト</li><li>LeetCode<ul><li>これまじ？</li><li>問題がつらい</li><li>丁寧につくってくれな</li></ul></li><li>ABC</li><li>こどふぉ</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>体調が悪いのでよく寝た</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>DeepLizard</li><li>論文読み</li><li>競プロ復習</li><li>群知能</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-18</title>
      <link href="/2020/01/18/2020-01-18/"/>
      <url>/2020/01/18/2020-01-18/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>お出かけをします<ul><li>カイジくん･･･へたっぴさ･･･</li></ul></li><li>ニューラルネットワークわかんねぇ<ul><li>これ世界中の人やっているのすげぇな</li></ul></li><li>キーエンスコンテスト<ul><li>D方針が立つが実装したくないマンになる</li></ul></li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>カイジの映画、面白かったです（１，２よりはあまり　という感じ）</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>バイト</li><li>LeetCode</li><li>DeepLizard</li><li>ABC</li><li>こどふぉ</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-17</title>
      <link href="/2020/01/17/2020-01-17/"/>
      <url>/2020/01/17/2020-01-17/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>発表練習</li><li>マシンガンでラーメンを食べます<ul><li>腹が痛いね</li></ul></li><li>YukiCoder237 解けない＞＜</li><li>強化学習の更新<ul><li>（今の環境ネットワークから得られた情報 - 前のQ値)</li><li>で誤差関数になる</li></ul></li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>がんばろうね勉強</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>DeepLizard</li><li>ゆきこだ復習</li><li>論文読む</li><li>キーエンスコンテスト</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepLizardQ学習</title>
      <link href="/2020/01/15/deeplizard/"/>
      <url>/2020/01/15/deeplizard/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="Q学習"><a href="#Q学習" class="headerlink" title="Q学習"></a>Q学習</h2><p>行動価値関数で状態$s$において取るべき行動$a$を計算する方法。<br>episodeごとにQ値のテーブルを更新して、np.argmaxを取得して移動する。</p><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install gym</span><br></pre></td></tr></tbody></table></figure><pre><code>Collecting gym[?25l  Downloading https://files.pythonhosted.org/packages/1d/85/a7a462d7796f097027d60f9a62b4e17a0a94dcf12ac2a9f9a913333b11a6/gym-0.15.4.tar.gz (1.6MB)[K     |ââââââââââââââââââââââââââââââââ| 1.6MB 1.9MB/s eta 0:00:01     |âââââââââââââââ                 | 696kB 1.9MB/s eta 0:00:01[?25hRequirement already satisfied: scipy in /opt/conda/lib/python3.7/site-packages (from gym) (1.3.2)Requirement already satisfied: numpy>=1.10.4 in /opt/conda/lib/python3.7/site-packages (from gym) (1.17.3)Requirement already satisfied: six in /opt/conda/lib/python3.7/site-packages (from gym) (1.13.0)Collecting pyglet<=1.3.2,>=1.2.0[?25l  Downloading https://files.pythonhosted.org/packages/1c/fc/dad5eaaab68f0c21e2f906a94ddb98175662cc5a654eee404d59554ce0fa/pyglet-1.3.2-py2.py3-none-any.whl (1.0MB)[K     |ââââââââââââââââââââââââââââââââ| 1.0MB 29.2MB/s eta 0:00:01[?25hRequirement already satisfied: cloudpickle~=1.2.0 in /opt/conda/lib/python3.7/site-packages (from gym) (1.2.2)Collecting opencv-python[?25l  Downloading https://files.pythonhosted.org/packages/d8/38/60de02a4c9013b14478a3f681a62e003c7489d207160a4d7df8705a682e7/opencv_python-4.1.2.30-cp37-cp37m-manylinux1_x86_64.whl (28.3MB)[K     |ââââââââââââââââââââââââââââââââ| 28.3MB 36.2MB/s eta 0:00:01     |ââââââââââââââââ                | 13.8MB 38.0MB/s eta 0:00:01     |âââââââââââââââââââââââ         | 19.9MB 36.2MB/s eta 0:00:01[?25hCollecting future[?25l  Downloading https://files.pythonhosted.org/packages/45/0b/38b06fd9b92dc2b68d58b75f900e97884c45bedd2ff83203d933cf5851c9/future-0.18.2.tar.gz (829kB)[K     |ââââââââââââââââââââââââââââââââ| 829kB 12.2MB/s eta 0:00:01[?25hBuilding wheels for collected packages: gym, future  Building wheel for gym (setup.py) ... [?25ldone[?25h  Created wheel for gym: filename=gym-0.15.4-cp37-none-any.whl size=1648485 sha256=bc8d1a069590fcec0afed101d3e0c289d5c40d6eff4b14fb5ef57029717912fa  Stored in directory: /home/jovyan/.cache/pip/wheels/e9/26/9b/8a1a6599a91077a938ac4348cc3d3ac84bfab0dbfddeb4c6e7  Building wheel for future (setup.py) ... [?25ldone[?25h  Created wheel for future: filename=future-0.18.2-cp37-none-any.whl size=491057 sha256=2400043f630cc437e24bf654c13b047ecffe61323d1606e61b51cdef0c2e8eb8  Stored in directory: /home/jovyan/.cache/pip/wheels/8b/99/a0/81daf51dcd359a9377b110a8a886b3895921802d2fc1b2397eSuccessfully built gym futureInstalling collected packages: future, pyglet, opencv-python, gymSuccessfully installed future-0.18.2 gym-0.15.4 opencv-python-4.1.2.30 pyglet-1.3.2</code></pre><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> gym</span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"><span class="hljs-keyword">import</span> time</span><br><span class="line"><span class="hljs-keyword">from</span> IPython.display <span class="hljs-keyword">import</span> clear_output</span><br></pre></td></tr></tbody></table></figure><p>gymの環境を読み込む</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env = gym.make(<span class="hljs-string">"FrozenLake-v0"</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(env.action_space)</span><br><span class="line">print(env.action_space.n)</span><br><span class="line">print(env.observation_space)</span><br><span class="line">print(env.observation_space.n)</span><br></pre></td></tr></tbody></table></figure><pre><code>Discrete(4)4Discrete(16)16</code></pre><p>Qテーブルを用意する。<br>状態数　＊　アクション数になる。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">action_space_size = env.action_space.n</span><br><span class="line">state_space_size = env.observation_space.n</span><br><span class="line">q_table = np.zeros((state_space_size, action_space_size))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(q_table)</span><br></pre></td></tr></tbody></table></figure><pre><code>[[0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.] [0. 0. 0. 0.]]</code></pre><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num_episodes = <span class="hljs-number">10000</span></span><br><span class="line">max_steps_per_episode = <span class="hljs-number">100</span></span><br><span class="line"></span><br><span class="line">learning_rate = <span class="hljs-number">0.1</span></span><br><span class="line">discount_rate = <span class="hljs-number">0.99</span></span><br><span class="line"></span><br><span class="line">exploration_rate = <span class="hljs-number">1</span></span><br><span class="line">max_exploration_rate = <span class="hljs-number">1</span></span><br><span class="line">min_exploration_rate = <span class="hljs-number">0.01</span></span><br><span class="line">exploration_decay_late=<span class="hljs-number">0.001</span></span><br></pre></td></tr></tbody></table></figure><p>エピソードの回数だけ、エージェントを動かす。<br>状態は環境をリセットして受け取り、どの状態から行動だけをコーディングする。<br>（内部の操作などはgymがやってくれる。）</p><p>新しい状態へはenv.step(アクション)で<br>新しい状態, 報酬, 終わったか？, 情報を返してくれる。</p><p>Q値のテーブルは<br>報酬に加えて、これまでのQ値のテーブルのうち次の状態$s’$から<br><code>q_table[s', :]</code>、つまり次の状態$s’$で取れる行動のうち、最大の値をもつもののインデックスをnp.argmaxで取り出す。<br>このように状態や行動が数字で表されているため、Numpyで操作しやすいので嬉しい。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">rewards_all_episodes = []</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> episode <span class="hljs-keyword">in</span> range(num_episodes):</span><br><span class="line">    state = env.reset()</span><br><span class="line">    done = <span class="hljs-literal">False</span></span><br><span class="line">    rewards = <span class="hljs-number">0</span></span><br><span class="line">    <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> range(max_steps_per_episode):</span><br><span class="line">        eps = random.uniform(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> eps > exploration_rate:</span><br><span class="line">            action = np.argmax(q_table[state, :])</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-comment"># envă§ăŠăłăă ă˘ăŻăˇă§ăł</span></span><br><span class="line">            action = env.action_space.sample()</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment"># state 0~15</span></span><br><span class="line">        <span class="hljs-comment"># action 0~3 ćˇťĺ­ăŽăăăŤć°ĺ­ăŤăŞăŁăŚăă</span></span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment"># envă§stepăă¨ăŽčĄĺăăă</span></span><br><span class="line">        new_state, reward, done, info= env.step(action)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-comment"># info['prob'] = ?</span></span><br><span class="line">        q_table[state, action] += learning_rate * (reward + discount_rate * np.max(q_table[new_state, :]) - q_table[state, action])</span><br><span class="line">        state = new_state</span><br><span class="line">        rewards += reward</span><br><span class="line">        rewards += <span class="hljs-number">-0.001</span></span><br><span class="line">        <span class="hljs-keyword">if</span> done:</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">    </span><br><span class="line">    exploration_rate = min_exploration_rate + (max_exploration_rate - min_exploration_rate) * np.exp(-exploration_decay_late * episode)</span><br><span class="line">    rewards_all_episodes.append(rewards)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(rewards_all_episodes[<span class="hljs-number">9900</span>:])</span><br></pre></td></tr></tbody></table></figure><pre><code>[-0.03200000000000002, 0.989, 0.939, 0.9229999999999999, 0.971, -0.011000000000000003, -0.05200000000000004, -0.025000000000000015, 0.972, -0.10000000000000007, 0.8999999999999999, 0.982, -0.01900000000000001, 0.961, 0.988, 0.992, 0.986, -0.02900000000000002, -0.06100000000000005, -0.014000000000000005, -0.01800000000000001, 0.978, -0.08300000000000006, -0.10000000000000007, 0.9319999999999999, 0.978, -0.08700000000000006, 0.948, -0.06500000000000004, 0.968, -0.10000000000000007, 0.972, 0.9199999999999999, 0.968, 0.958, 0.985, 0.982, -0.017000000000000008, 0.953, -0.10000000000000007, 0.955, 0.964, -0.015000000000000006, 0.964, -0.10000000000000007, 0.972, 0.9169999999999999, 0.971, 0.975, 0.981, 0.987, 0.98, -0.06700000000000005, 0.989, 0.989, 0.969, -0.02000000000000001, -0.011000000000000003, 0.953, 0.9329999999999999, 0.971, -0.10000000000000007, -0.10000000000000007, 0.953, 0.972, -0.005, -0.04100000000000003, 0.951, -0.01800000000000001, 0.9069999999999999, 0.95, -0.02100000000000001, -0.014000000000000005, -0.10000000000000007, 0.95, 0.9249999999999999, 0.973, -0.012000000000000004, 0.9359999999999999, 0.965, 0.954, 0.962, -0.10000000000000007, -0.10000000000000007, -0.10000000000000007, 0.986, -0.012000000000000004, 0.954, -0.10000000000000007, 0.966, 0.974, -0.017000000000000008, 0.9109999999999999, 0.986, 0.947, 0.985, 0.957, 0.9289999999999999, 0.8999999999999999, 0.978]</code></pre><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rewards_per_thousand_episodes = np.split(np.array(rewards_all_episodes), num_episodes/<span class="hljs-number">1000</span>)</span><br><span class="line">count = <span class="hljs-number">1000</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="hljs-string">"********Average reward per thousand episodes********\n"</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> rewards_per_thousand_episodes:</span><br><span class="line">    print(count, <span class="hljs-string">": "</span>, str(sum(r) / <span class="hljs-number">1000</span>))</span><br><span class="line">    count += <span class="hljs-number">1000</span></span><br></pre></td></tr></tbody></table></figure><pre><code>********Average reward per thousand episodes********1000 :  0.031927999999999992000 :  0.170895000000000053000 :  0.351309999999999964000 :  0.53064200000000025000 :  0.59329899999999986000 :  0.60817200000000047000 :  0.61047299999999948000 :  0.658249000 :  0.592943999999999610000 :  0.6391379999999993</code></pre><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-string">SFFF</span></span><br><span class="line"><span class="hljs-string">FHFH</span></span><br><span class="line"><span class="hljs-string">FFFH</span></span><br><span class="line"><span class="hljs-string">HFFG</span></span><br><span class="line"><span class="hljs-string">"""</span></span><br><span class="line"><span class="hljs-comment">## left down right up</span></span><br><span class="line">print(<span class="hljs-string">"\n\n********Q-table********\n"</span>)</span><br><span class="line">print(q_table)</span><br></pre></td></tr></tbody></table></figure><pre><code>********Q-table********[[0.50860836 0.50433391 0.49361183 0.50622988] [0.29865329 0.33890008 0.37558601 0.47523278] [0.38509131 0.39300558 0.38158991 0.45651672] [0.24772817 0.24170661 0.30553236 0.44594153] [0.53690444 0.40922313 0.31705662 0.31266024] [0.         0.         0.         0.        ] [0.46853418 0.13698248 0.18588531 0.09231742] [0.         0.         0.         0.        ] [0.21548225 0.47255957 0.32832391 0.60171063] [0.45491031 0.66551718 0.4782614  0.45231346] [0.6499094  0.31232745 0.31200804 0.33453915] [0.         0.         0.         0.        ] [0.         0.         0.         0.        ] [0.42402415 0.41175286 0.75670931 0.52559385] [0.72822262 0.86196169 0.78472814 0.74863557] [0.         0.         0.         0.        ]]</code></pre><p>実行をする際はrenderで描画できる。<br>このとき、IPythonのclear_output(wait=True)を使うと<br>何個も画像を出すのではなく更新しながら描画できる。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> episode <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):</span><br><span class="line">    state = env.reset()</span><br><span class="line">    print(<span class="hljs-string">"****EPISODE: "</span>, episode + <span class="hljs-number">1</span>, <span class="hljs-string">"****\n\n"</span>)</span><br><span class="line">    time.sleep(<span class="hljs-number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> range(max_steps_per_episode):</span><br><span class="line">        clear_output(wait=<span class="hljs-literal">True</span>)</span><br><span class="line">        env.render()</span><br><span class="line">        time.sleep(<span class="hljs-number">1</span>)</span><br><span class="line">        </span><br><span class="line">        action = np.argmax(q_table[state,  :])</span><br><span class="line">        new_state, reward, done, info = env.step(action)</span><br><span class="line">        </span><br><span class="line">        <span class="hljs-keyword">if</span> done:</span><br><span class="line">            clear_output(wait=<span class="hljs-literal">True</span>)</span><br><span class="line">            env.render()</span><br><span class="line">            <span class="hljs-keyword">if</span> reward == <span class="hljs-number">1</span>:</span><br><span class="line">                print(<span class="hljs-string">"You Win!"</span>)</span><br><span class="line">                time.sleep(<span class="hljs-number">3</span>)</span><br><span class="line">            <span class="hljs-keyword">else</span>:</span><br><span class="line">                print(<span class="hljs-string">"You Lose..."</span>)</span><br><span class="line">                time.sleep(<span class="hljs-number">3</span>)</span><br><span class="line">            clear_output(wait=<span class="hljs-literal">True</span>)</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">        state = new_state</span><br></pre></td></tr></tbody></table></figure><pre><code>[41mS[0mFFFFHFHFFFHHFFG</code></pre><p>render can render the state in the game state.<br>and we program about q_table and in the all inside state can be handled by gym.<br>so we can use easiliy.</p><p>clear_output can erase the screen</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 動画講座 </tag>
            
            <tag> DeepLizard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-15</title>
      <link href="/2020/01/15/2020-01-15/"/>
      <url>/2020/01/15/2020-01-15/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>卒論修正</li><li>卒論スライド作成</li><li>Deeplizard</li><li>研究考案</li><li>こどふぉ復習</li><li>Streak</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>研究で考えたアイディアが全部ダメだったときの感情･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>卒論チェックをお願いする</li><li>論文読む</li><li>DeepLizard</li><li>競プロ復習</li><li>研究考案</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-14</title>
      <link href="/2020/01/14/2020-01-14/"/>
      <url>/2020/01/14/2020-01-14/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>学校に行く</li><li>卒論の修正</li><li>Deeplizard</li><li>論文を読む -> 読めません</li><li>ドワコンの復習</li><li>ゲーム理論の記事書き</li><li>これからこどふぉ</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>研究頑張らないとなぁになっている<br>そのために</p><ul><li>Deeplizardを終わらせる</li><li>論文を読み切るか、なにか良いアイディアを出して早く実装しろ</li></ul><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>卒論最終チェック & 依頼</li><li>スライド作成</li><li>Deeplizard</li><li>研究</li><li>競プロ復習</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ゲーム理論 混合戦略</title>
      <link href="/2020/01/14/game_theory_mix_strategy/"/>
      <url>/2020/01/14/game_theory_mix_strategy/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><p><a href="https://www.youtube.com/watch?v=DNXGJtIU6jE&list=PLUSedGbPEn3hCIOVcOZD_FYzgKYLLXt7l&index=3&t=0s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=DNXGJtIU6jE&list=PLUSedGbPEn3hCIOVcOZD_FYzgKYLLXt7l&index=3&t=0s</a></p><h2 id="ナッシュ均衡の存在"><a href="#ナッシュ均衡の存在" class="headerlink" title="ナッシュ均衡の存在"></a>ナッシュ均衡の存在</h2><p>ゲーム$G = (N, S, u)$</p><p>$S$は各プレイヤーの戦略の組の集合<br>$u$は各プレイヤーの戦略の組に対する利得関数<br>としたとき、純粋戦略（確定的行動のみ）の場合は、最適反応戦略が存在しないことがある。</p><p>例えば、PKである。<br>Lがキッカー、Rがキーパーなら、彼らはお互いの戦略に対して反対の行動をしたい。</p><p>これでは、最適反応戦略がなく、ナッシュ均衡も存在しない。</p><h2 id="混合戦略"><a href="#混合戦略" class="headerlink" title="混合戦略"></a>混合戦略</h2><p>各プレイヤーがそれぞれの戦略をとる、という行為に確率を設けた場合の戦略を混合戦略という。</p><p>例えば、キッカーが左に蹴る確率を$p$<br>キーパーが左に移動する確率を$q$、それぞれそうでない確率を$1-p$,$1-q$とする。</p><p>このとき、彼らが得られるであろう利得を期待値を用いて計算できる。<br>この期待値に関して、$p, q$のグラフを書くと各プレイヤーの交点が生じる。</p><p>この交点が混合戦略におけるナッシュ均衡であり、混合戦略を含めれば必ずナッシュ均衡は存在する。</p><p>この混合戦略における最適反応のグラフを<code>最適反応曲線</code>という。</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 動画講座 </tag>
            
            <tag> ゲーム理論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ゲーム理論 純粋戦略とナッシュ均衡</title>
      <link href="/2020/01/14/game_theory_nasyu/"/>
      <url>/2020/01/14/game_theory_nasyu/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><p><a href="https://www.youtube.com/watch?v=Q9x-2hFbQOU&list=PLUSedGbPEn3hCIOVcOZD_FYzgKYLLXt7l&index=2&t=7s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Q9x-2hFbQOU&list=PLUSedGbPEn3hCIOVcOZD_FYzgKYLLXt7l&index=2&t=7s</a></p><h2 id="囚人のジレンマ"><a href="#囚人のジレンマ" class="headerlink" title="囚人のジレンマ"></a>囚人のジレンマ</h2><p>(プレイヤー, 戦略, 利得)で表現されたものを<code>戦略ゲーム</code>という。</p><p>囚人のジレンマでは二人のプレイヤーが存在し、AさんBさんがそれぞれ戦略を決めて自分の利得を最大化しようとする。</p><h2 id="最適反応戦略"><a href="#最適反応戦略" class="headerlink" title="最適反応戦略"></a>最適反応戦略</h2><p>相手の戦略を固定したときに、自分が取るべき戦略を最適反応戦略という。<br>これは、相手がどの戦略を取ったとしても自分の利益が最大になるような戦略である。</p><p>囚人のジレンマでは、相手の戦略を固定すると自白するのが最も良い戦略となる。</p><h2 id="ナッシュ均衡"><a href="#ナッシュ均衡" class="headerlink" title="ナッシュ均衡"></a>ナッシュ均衡</h2><p>各プレイヤーの最適反応戦略の組を<code>ナッシュ均衡</code>という。<br>このナッシュ均衡において、誰かが戦略を変えるとそのプレイヤーの得られる利得が減ってしまう。<br>よって、ナッシュ均衡よりも全体として良い状況があっても、プレイヤーが決定的ならばナッシュ均衡に必ず陥ってしまう。</p><h2 id="パレート最適"><a href="#パレート最適" class="headerlink" title="パレート最適"></a>パレート最適</h2><p>パレート最適とは、他の人に迷惑をかけることのない状態で最も自分が良い戦略の組である。<br>つまり、このパレート最適からなにか改善を行うためには、他の誰かが犠牲になるということである。<br>自分が戦略を変えると相手に迷惑がかかる状態がパレート最適であり、<br>囚人のジレンマでは共に黙秘を取る状態である。</p><p>自分が自白すれば、自分は改善されるが相手の刑期が伸びてしまう。</p><h2 id="標準形ゲームの定義"><a href="#標準形ゲームの定義" class="headerlink" title="標準形ゲームの定義"></a>標準形ゲームの定義</h2><p>$G = (N, S, u)$として表す。</p><p>$N$はプレイヤーの集合</p><p>$S$は戦略の集合</p><p>つまり、$S = \prod_{i\in N} S_i$である。<br>各プレイヤーが取れる戦略の組である。<br>例(（自白、自白）、（黙秘、自白）)など</p><p>$|S| = d^N$である$(d = 取れる戦略数)$</p><p>$u$を利得関数の組とし</p><p>$u = {u_i}_{i\in N}$<br>$u_i: S \to R$である。<br>これは、それぞれのプレイヤーが取る戦略を選んだ状況を考えたときに与えられる、各プレイヤーへの利得関数である。</p><p>$u_A(自白、黙秘) = 0$<br>$u = {u_A, u_B}$といったものである。</p><h2 id="最適反応"><a href="#最適反応" class="headerlink" title="最適反応"></a>最適反応</h2><p>最適反応は</p><p>$G = (N, S, u)$において、戦略$s_i \in S_i$($S_{i}$は各プレイヤーがとる戦略をあわせた状況)が<br>他のプレイヤーの戦略の組$s_{-i}$に対して<br>最適であるとき</p><p>$u_i(s_i, s_{-i}) = max_{t_i \in S_i} u_i(t_i, s_{-i})$</p><p>つまり、相手たちの戦略$s_{-i}$に対して、最も利得関数が大きくなるような$t_i$を自分が選べるようなものが最適反応戦略である。</p><h2 id="ナッシュ均衡-1"><a href="#ナッシュ均衡-1" class="headerlink" title="ナッシュ均衡"></a>ナッシュ均衡</h2><p>戦略の組$s^{*} \in S$がナッシュ均衡であるとき<br>すべての$i$に対して、$s^{*}_i$が他のプレイヤーの組に対する最適反応である。</p><p>つまり、自分が戦略を変えれば自分だけ被害を被ってしまう。</p><p>よって</p><p>$u_i(s^{*}) \geq u_i(s_i, s^{*}_{-i}) , \forall s_i \in S_i$を満たすときである。</p><p>相手が最適なとき、自分も最適なものを選べていればナッシュ均衡！</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 動画講座 </tag>
            
            <tag> ゲーム理論 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-13</title>
      <link href="/2020/01/13/2020-01-13/"/>
      <url>/2020/01/13/2020-01-13/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><p>ABC151復習<br>三分探索の勉強<br>PSOでABC挑戦（負け）<br>ゆきこだ<br>バイト<br>研究考案->敗北を知る</p><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>研究テーマが思いつかない<br>調査が足りてないんかなあ･･</p><p>競プロも溜まってきている</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>AI本借りるやる</li><li>ゲーム理論まとめる</li><li>卒論修正</li><li>研究考える</li><li>こどふぉ夜</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS188 09/27 RL2</title>
      <link href="/2020/01/12/cs188_rl2/"/>
      <url>/2020/01/12/cs188_rl2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/</a><br><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec11/FA18_cs188_lecture11_reinforcement_learning_II_1pp.pdf" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec11/FA18_cs188_lecture11_reinforcement_learning_II_1pp.pdf</a><br><a href="https://www.youtube.com/watch?v=XafrqwHfBKE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=XafrqwHfBKE</a></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h2 id="Model-Free"><a href="#Model-Free" class="headerlink" title="Model Free"></a>Model Free</h2><p>前回の復習である．<br>モデルフリーは，モデルをすべて作るのではなくオンタイムにモデルを修正していく．</p><p>毎回の試行で$R(s, a, s’, r)$を得て</p><p>$Q(s, a) = r + \gamma max_{a’}Q(s’, a’)$というサンプル（毎回の試行による値）を用いて</p><p>$Q(s, a) \leftarrow (1-\alpha)Q(s, a) + \alpha[r + \gamma max_{a’}(s’, a’)]$として毎回更新できる．</p><h2 id="Exploration-Functions"><a href="#Exploration-Functions" class="headerlink" title="Exploration Functions"></a>Exploration Functions</h2><p>より効率良くQ学習を行うために，探索を積極的に行うようにする．<br>まず，$\alpha$は後半ほど小さくするようにする．これによって，これまでの経験を活かすようになる．</p><p>ここで，より経験してないところを探索するように<br>utilityを$u$，これまでの訪問回数を$n$，定数を$k$として</p><p>$f(u, n) = u + k/(n + 1)$とする.</p><p>この$f$がどれぐらい訪問したいか？を表す．<br>訪問回数がすくないところは，$k/(n+1)$が大きいため，積極的に訪問する．<br>そして，訪問回数$n$が増えるともともとの$n$に収束する．</p><p>これを用いてQ学習を修正すると</p><p>$Q(s, a) = \alpha R(s, a, s’) + \gamma max_{a’}f(Q(s’, a’), N(s’, a’))$</p><p>ここで$N(s’, a’)$はどれくらい状態$s$で行動$a$を行ったか？である．<br>これによって，行ってない状態での行動を積極的に行うようになり，収束が早くなる．</p><h2 id="Approximately"><a href="#Approximately" class="headerlink" title="Approximately"></a>Approximately</h2><p>ここまでは各状態ごとに計算していた．</p><p>しかし，現実の問題は状態が限りなくある．<br>また，人間も状況ごとに対応しておらず，何かしら<code>パターン</code>などを学習している．</p><p>よって，状況の良さを近似することでより収束を早く，一般化を行う（過学習のイメージ）．</p><h2 id="Feature-Based-Learning"><a href="#Feature-Based-Learning" class="headerlink" title="Feature Based Learning"></a>Feature Based Learning</h2><p>Featuresは，状態$s$を実数値に変える関数．</p><p>例えばパックマンなら，どれくらいゴーストが近いか？どのくらいアイテムまで近いか？などを状態$s$から計算し<br>その$s$を特徴（ゴーストが近いか？）ごとに実数にして行動$a$を計算するためのQ値に利用する．</p><h2 id="Linear-Value-Functions"><a href="#Linear-Value-Functions" class="headerlink" title="Linear Value Functions"></a>Linear Value Functions</h2><p>Featureを利用する．</p><p>$Q(s, a) = w_1 f_1(s, a) + w_2 f_2(s, a) + … + w_n f_n(s, a)$</p><p>ここで，$n$は特徴量の数．例えばパックマンのゴーストの近さ，アイテムまでの近さなら$n=2$</p><p>このように状態$s$から行動$a$を行うとした時，この$s$から行動$a$を取ったときの，各特徴量ごとに重みをかけた線形和を求めてQ値とする．</p><p>以下のように計算する．</p><p>$diff = [r + \gamma max_{a’}Q(s’, a’)] - Q(s, a)$<br>つまり今回のサンプリングで分かった値-これまでの推定値．</p><p>また，</p><p>$Q(s, a) = Q(s, a) + \alpha [diff]$として更新し<br>各重みは</p><p>$w_i = w_i + \alpha [diff] f_i(s, a)$</p><p>として計算する．</p><p>なにをやっているかを説明する．<br>diffは今回のサンプリング（試行）でどれくらい良いか？を表している．<br>つまり，今回の試行が10で，もともとQ(s,a)=5なら，さらに５だけ良くなったということを表している．</p><p>そして，もし結果がよくなれば重みにもそれは対応してほしい．<br>よって，重みにdiffを足し，また$f_i(s, a)$を計算して今回の行動で$i$番目の特徴量はどれくらい寄与したか？で重みを更新する．</p><p>これによって，意味のある重みはどんどん大きくなり，あまり意味のないものは消えていく．</p><p>これは，最小二乗法の式に実はなっている．</p><p>$Error(w) = (y - \sum_k w_k f_k (x))^2 / 2$</p><p>という重みに関する損失関数を考える．<br>$x$は入力で$y$は正しい値である．</p><p>今回のdiff式では$y$が実際にサンプリング値である．（環境から得られている時点である程度正しいため）</p><p>そして，これを偏微分してその傾きの負の方向にすすめると誤差が小さくなる．</p><p>よって，これによって，どんどん誤差が小さくなっていく．</p><p>よって，</p><p>$w_i = w_i + \alpha[r + \gamma max_{a’}Q(s’, a’) - Q(s, a)] f_i(s, a)$</p><p>を重みは計算しており，最小二乗法の微分から重みを修正していた．</p><p>これによって，高速にQが求まるらしい．</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> CS188 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeXで複数の数式を並べてラベルをつけたいとき</title>
      <link href="/2020/01/12/latex_multiple/"/>
      <url>/2020/01/12/latex_multiple/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>LaTeXで複数の数式を並べながら一つだけラベルを付けたい時があると思います．<br>特に，「＝」で並べたくは無いんだよなぁ･･･というときです．</p><p><img src="multiple.png" alt></p><p>上記のようなときですね．</p><h2 id="やりかた"><a href="#やりかた" class="headerlink" title="やりかた"></a>やりかた</h2><figure class="highlight tex hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-tag">\<span class="hljs-name">begin</span><span class="hljs-string">{equation}</span></span></span><br><span class="line">  <span class="hljs-tag">\<span class="hljs-name">label</span><span class="hljs-string">{here}</span></span></span><br><span class="line">  <span class="hljs-tag">\<span class="hljs-name">begin</span><span class="hljs-string">{gathered}</span></span> </span><br><span class="line">    y = x^2 <span class="hljs-tag">\<span class="hljs-name">\</span></span></span><br><span class="line">    x = w^2</span><br><span class="line">  <span class="hljs-tag">\<span class="hljs-name">end</span><span class="hljs-string">{gathered}</span></span></span><br><span class="line"><span class="hljs-tag">\<span class="hljs-name">end</span><span class="hljs-string">{equation}</span></span></span><br></pre></td></tr></tbody></table></figure><p>下の式は，MathJax（JS）だと<code>\\</code>が改行されず，ラベルもつかないようです･･･</p><p>\begin{equation}<br>  \label{here}<br>  \begin{gathered}<br>    y = x^2 \<br>    x = w^2<br>  \end{gathered}<br>\end{equation}</p><p><a href="https://qiita.com/t_kemmochi/items/a4c390b4967b13f3afb7" target="_blank" rel="noopener">https://qiita.com/t_kemmochi/items/a4c390b4967b13f3afb7</a></p><p>上記のページで述べられていますが</p><p>gatherはすべての数式を強制的に中央揃えします．<br>一方，gatheredは一部のみgather環境にすることができます．<br>gatherはlabelが使えなかったため(自分のミスかもしれません，使えるかも･･･？)，gatheredにすることで，equationのみにラベルをつけるかつ，数式を並べられます．</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> LaTeX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode biweekly17</title>
      <link href="/2020/01/12/leetcode_17/"/>
      <url>/2020/01/12/leetcode_17/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>普段はScrapboxに書いていますが</p><p>LeetCodeくんは別に書くほどでもないのでこっちにかきます</p><p>LeetCodeくん面白くないなぁ（問題とか分かりづらさとか諸々で）</p><p><a href="https://leetcode.com/contest/biweekly-contest-17" target="_blank" rel="noopener">https://leetcode.com/contest/biweekly-contest-17</a></p><h2 id="1313-Decompress-Run-Length-Encoded-List"><a href="#1313-Decompress-Run-Length-Encoded-List" class="headerlink" title="1313. Decompress Run-Length Encoded List"></a>1313. Decompress Run-Length Encoded List</h2><p>やるだけをします。</p><figure class="highlight c++ hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">vector</span><<span class="hljs-keyword">int</span>> decompressRLElist(<span class="hljs-built_in">vector</span><<span class="hljs-keyword">int</span>> &nums) {</span><br><span class="line">    <span class="hljs-keyword">int</span> len = nums.<span class="hljs-built_in">size</span>();</span><br><span class="line">    <span class="hljs-built_in">vector</span><<span class="hljs-keyword">int</span>> res;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i < len / <span class="hljs-number">2</span>; i++) {</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j < nums[i * <span class="hljs-number">2</span>]; j++) {</span><br><span class="line">            res.push_back(nums[i * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="1314-Matrix-Block-Sum"><a href="#1314-Matrix-Block-Sum" class="headerlink" title="1314. Matrix Block Sum"></a>1314. Matrix Block Sum</h2><p>やるだけをします。</p><p>入力形式強いられるのすごい嫌だなぁ</p><figure class="highlight c++ hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line"><span class="hljs-built_in">vector</span><<span class="hljs-built_in">vector</span><<span class="hljs-keyword">int</span>>> matrixBlockSum(<span class="hljs-built_in">vector</span><<span class="hljs-built_in">vector</span><<span class="hljs-keyword">int</span>>> &mat, <span class="hljs-keyword">int</span> K) {</span><br><span class="line">    <span class="hljs-keyword">int</span> H = mat.<span class="hljs-built_in">size</span>();</span><br><span class="line">    <span class="hljs-keyword">int</span> W = mat[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">vector</span><<span class="hljs-built_in">vector</span><<span class="hljs-keyword">int</span>>> ans(H, <span class="hljs-built_in">vector</span><<span class="hljs-keyword">int</span>>(W, <span class="hljs-number">0</span>));</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i < H; i++) {</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j < W; j++) {</span><br><span class="line">            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a = -K; a <= K; a++) {</span><br><span class="line">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> b = -K; b <= K; b++) {</span><br><span class="line">                    <span class="hljs-keyword">int</span> y = i + a;</span><br><span class="line">                    <span class="hljs-keyword">int</span> x = j + b;</span><br><span class="line">                    <span class="hljs-keyword">if</span> (y >= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y < H <span class="hljs-keyword">and</span> x >= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> x < W) {</span><br><span class="line">                        ans[i][j] += mat[y][x];</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="even-value"><a href="#even-value" class="headerlink" title="even value"></a>even value</h2><p>rootがどのノードかくらい書いてほしいですが･･･</p><p>親の親が偶数なら、自分のValueを加算する問題。</p><p>自分が偶数なら、子供の子供のValueを足す、というふうに見れば<br>あとはDFSをすればよい。</p><p>こういうポインタ系でやるのひさしぶりすぎてすごく時間かかった･･･</p><figure class="highlight c++ hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">/**</span></span><br><span class="line"><span class="hljs-comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="hljs-comment"> * struct TreeNode {</span></span><br><span class="line"><span class="hljs-comment"> *     int val;</span></span><br><span class="line"><span class="hljs-comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="hljs-comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}</span></span><br><span class="line"><span class="hljs-comment"> * };</span></span><br><span class="line"><span class="hljs-comment"> */</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func</span><span class="hljs-params">(TreeNode* v, <span class="hljs-keyword">bool</span> p, <span class="hljs-keyword">bool</span> pp, <span class="hljs-keyword">int</span>& ans)</span></span>{</span><br><span class="line">        <span class="hljs-keyword">if</span>(v == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">        <span class="hljs-keyword">if</span>(p){</span><br><span class="line">            ans += v->val;</span><br><span class="line">        }</span><br><span class="line">        func(v->left, pp, (v->val) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, ans);</span><br><span class="line">        func(v->right, pp, (v->val) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, ans);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sumEvenGrandparent</span><span class="hljs-params">(TreeNode* root)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;</span><br><span class="line">        func(root, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, ans);</span><br><span class="line">        <span class="hljs-keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><p>これ疑問なんですが、作問者全言語パターンかくのつらすぎませんか？</p><h2 id="1316-Distinct-Echo-Substrings"><a href="#1316-Distinct-Echo-Substrings" class="headerlink" title="1316. Distinct Echo Substrings"></a>1316. Distinct Echo Substrings</h2><p>ローリングハッシュをはればいいです。<br>tupleもどうやらsetに入るみたいなのでうきうきですね</p><figure class="highlight c++ hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">RollingHash</span> {</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">using</span> long_type = <span class="hljs-keyword">unsigned</span>;</span><br><span class="line">    <span class="hljs-keyword">using</span> hash_type = tuple<long_type, long_type, long_type>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">int</span> s_len;</span><br><span class="line"></span><br><span class="line">    long_type mod1;</span><br><span class="line">    long_type mod2;</span><br><span class="line">    long_type mod3;</span><br><span class="line"></span><br><span class="line">    long_type base1;</span><br><span class="line">    long_type base2;</span><br><span class="line">    long_type base3;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">vector</span><long_type> hash1;</span><br><span class="line">    <span class="hljs-built_in">vector</span><long_type> hash2;</span><br><span class="line">    <span class="hljs-built_in">vector</span><long_type> hash3;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">vector</span><long_type> pow1;</span><br><span class="line">    <span class="hljs-built_in">vector</span><long_type> pow2;</span><br><span class="line">    <span class="hljs-built_in">vector</span><long_type> pow3;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    RollingHash() :</span><br><span class="line">            base1(<span class="hljs-number">1009</span>), base2(<span class="hljs-number">1007</span>), base3(<span class="hljs-number">2339</span>),</span><br><span class="line">            mod1(<span class="hljs-number">1000000007</span>), mod2(<span class="hljs-number">1000000009</span>), mod3(<span class="hljs-number">1000000087</span>) {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    RollingHash(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> s) :</span><br><span class="line">            RollingHash() {</span><br><span class="line">        init(s);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> s)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> n = s.<span class="hljs-built_in">size</span>();</span><br><span class="line">        s_len = n;</span><br><span class="line"></span><br><span class="line">        hash1.assign(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">        hash2.assign(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">        hash3.assign(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">        pow1.assign(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line">        pow2.assign(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line">        pow3.assign(n + <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i < n; i++) {</span><br><span class="line">            hash1[i + <span class="hljs-number">1</span>] = ((hash1[i] + s[i]) * base1);</span><br><span class="line">            hash2[i + <span class="hljs-number">1</span>] = ((hash2[i] + s[i]) * base2);</span><br><span class="line">            hash3[i + <span class="hljs-number">1</span>] = ((hash3[i] + s[i]) * base3);</span><br><span class="line">            pow1[i + <span class="hljs-number">1</span>] = (pow1[i] * base1);</span><br><span class="line">            pow2[i + <span class="hljs-number">1</span>] = (pow2[i] * base2);</span><br><span class="line">            pow3[i + <span class="hljs-number">1</span>] = (pow3[i] * base3);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//0-index</span></span><br><span class="line">    <span class="hljs-comment">//s[l, r)のハッシュタプルを返す</span></span><br><span class="line">    <span class="hljs-function">hash_type <span class="hljs-title">get_hash_tuple</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>{</span><br><span class="line">        long_type h1 = ((hash1[r] - hash1[l] * pow1[r - l] + mod1) % mod1 + mod1) % mod1;</span><br><span class="line">        long_type h2 = ((hash2[r] - hash2[l] * pow2[r - l] + mod2) % mod2 + mod2) % mod2;</span><br><span class="line">        long_type h3 = ((hash3[r] - hash3[l] * pow3[r - l] + mod3) % mod3 + mod3) % mod3;</span><br><span class="line">        <span class="hljs-keyword">return</span> make_tuple(h1, h2, h3);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//not verify</span></span><br><span class="line">    <span class="hljs-comment">//htype_1のハッシュの後ろに長さh2_lenのハッシュを結合する</span></span><br><span class="line">    <span class="hljs-function">hash_type <span class="hljs-title">concat</span><span class="hljs-params">(hash_type h_tup1, hash_type h_tup2, <span class="hljs-keyword">int</span> h2_len)</span> </span>{</span><br><span class="line">        long_type h1 = (<span class="hljs-built_in">get</span><<span class="hljs-number">0</span>>(h_tup1) * pow1[h2_len] + <span class="hljs-built_in">get</span><<span class="hljs-number">0</span>>(h_tup2)) % mod1;</span><br><span class="line">        long_type h2 = (<span class="hljs-built_in">get</span><<span class="hljs-number">1</span>>(h_tup1) * pow2[h2_len] + <span class="hljs-built_in">get</span><<span class="hljs-number">1</span>>(h_tup2)) % mod2;</span><br><span class="line">        long_type h3 = (<span class="hljs-built_in">get</span><<span class="hljs-number">2</span>>(h_tup1) * pow3[h2_len] + <span class="hljs-built_in">get</span><<span class="hljs-number">2</span>>(h_tup2)) % mod3;</span><br><span class="line">        <span class="hljs-keyword">return</span> make_tuple(h1, h2, h3);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//先頭i文字のハッシュタプルを返す</span></span><br><span class="line">    <span class="hljs-function">hash_type <span class="hljs-title">get_from_head</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">return</span> get_hash_tuple(<span class="hljs-number">0</span>, len);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//末尾i文字のハッシュタプルを返す</span></span><br><span class="line">    <span class="hljs-function">hash_type <span class="hljs-title">get_from_tail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> len)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">return</span> get_hash_tuple(s_len - len, s_len);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//sを含む個数の計算</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">contain</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">int</span> ret = <span class="hljs-number">0</span>;</span><br><span class="line">        <span class="hljs-keyword">int</span> m_len = <span class="hljs-keyword">this</span>->s_len;</span><br><span class="line">        <span class="hljs-keyword">int</span> o_len = s.<span class="hljs-built_in">size</span>();</span><br><span class="line">        <span class="hljs-function">RollingHash <span class="hljs-title">o_hash</span><span class="hljs-params">(s)</span></span>;</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i < m_len - o_len + <span class="hljs-number">1</span>; i++) {</span><br><span class="line">            <span class="hljs-keyword">auto</span> h1 = get_hash_tuple(i, i + o_len);</span><br><span class="line">            <span class="hljs-keyword">auto</span> h2 = o_hash.get_hash_tuple(<span class="hljs-number">0</span>, o_len);</span><br><span class="line">            <span class="hljs-keyword">if</span> (RollingHash::same(h1, h2)) ret++;</span><br><span class="line">        }</span><br><span class="line">        <span class="hljs-keyword">return</span> ret;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">same</span><span class="hljs-params">(hash_type h_tup1, hash_type h_tup2)</span> </span>{</span><br><span class="line">        <span class="hljs-keyword">return</span> h_tup1 == h_tup2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">typedef</span> tuple<<span class="hljs-keyword">unsigned</span>, <span class="hljs-keyword">unsigned</span>, <span class="hljs-keyword">unsigned</span>> TP;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">distinctEchoSubstrings</span><span class="hljs-params">(<span class="hljs-built_in">string</span> <span class="hljs-built_in">text</span>)</span> </span>{</span><br><span class="line">    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">text</span>.<span class="hljs-built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function">RollingHash <span class="hljs-title">hash</span><span class="hljs-params">(<span class="hljs-built_in">text</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-built_in">set</span><TP> st;</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i < n; i++) {</span><br><span class="line">        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j <= n; j++) {</span><br><span class="line"></span><br><span class="line">            <span class="hljs-keyword">if</span> (i + <span class="hljs-number">2</span> * j > n) <span class="hljs-keyword">break</span>;</span><br><span class="line">            <span class="hljs-keyword">if</span> (hash.get_hash_tuple(i, i + j) == hash.get_hash_tuple(i + j, i + <span class="hljs-number">2</span> * j)) {</span><br><span class="line">                st.insert(hash.get_hash_tuple(i, i + j));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="hljs-keyword">return</span> st.<span class="hljs-built_in">size</span>();</span><br><span class="line">}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS188 09/25 RL1</title>
      <link href="/2020/01/11/cs188_rl1/"/>
      <url>/2020/01/11/cs188_rl1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/</a><br><a href="https://www.youtube.com/watch?v=TiXS7vROBEg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=TiXS7vROBEg</a><br><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec10/FA18_cs188_lecture10_reinforcement_learning_I_1pp.pdf" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec10/FA18_cs188_lecture10_reinforcement_learning_I_1pp.pdf</a><br><a href="http://www.snap-tck.com/room04/c01/stat/stat01/stat0104.html" target="_blank" rel="noopener">http://www.snap-tck.com/room04/c01/stat/stat01/stat0104.html</a></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h2 id="RL"><a href="#RL" class="headerlink" title="RL"></a>RL</h2><p>RLではエージェントが環境のなかで状態$s$を知覚して行動を行い報酬を得る、という行為を繰り返す。</p><p>MDPでは、環境などや報酬の関数がわかっているがRLでは分かっていないため試行しながら探していく。</p><p>RLは以下のように分けられている</p><ul><li>モデルベース</li><li>モデルフリー<ul><li>passive<ul><li>direct evaluation</li><li>indirective evaluation</li></ul></li><li>positive<ul><li>Q学習</li></ul></li></ul></li></ul><h2 id="モデルベース学習"><a href="#モデルベース学習" class="headerlink" title="モデルベース学習"></a>モデルベース学習</h2><p>モデルベースでは、まず経験を生かしてRLのためのモデルを作る。<br>そして、そのモデルが正しいかをチェックする。</p><ol><li>MDPを学習する<ol><li>$\hat{T}$を見積もるために、経験した$\hat{R}$から学習する。つまり行動を行って環境から報酬を貰いそこから遷移関数などの確率を計算する。ここで$\hat{x}$は$x$の推定値という意味である。統計らしい</li></ol></li><li>このモデルでSolveする。これを繰り返す。</li></ol><h2 id="モデルベースとモデルフリー"><a href="#モデルベースとモデルフリー" class="headerlink" title="モデルベースとモデルフリー"></a>モデルベースとモデルフリー</h2><p>年齢の予測を例に違いを考える。<br>あるクラスの年齢の平均、という意味で期待値を考える。<br>期待値は</p><p>$E[A] = \sum_a P(a) \times a$で求められる。</p><p>Aは人間の集合であり、aは年齢, Pは確率である。</p><p>ただ、これは分かっていないことが多いのでサンプリングなどで確率分布Pハットを求める。</p><h3 id="モデルベース"><a href="#モデルベース" class="headerlink" title="モデルベース"></a>モデルベース</h3><p>モデルベースのとき$N$人から情報を聞いたら</p><p>$\hat{P}(a) = num(a) / N$という確率になり、あとはこの推定$\hat{P}$を用いて計算すれば良い。</p><h3 id="モデルフリー"><a href="#モデルフリー" class="headerlink" title="モデルフリー"></a>モデルフリー</h3><p>N人から情報を聞き</p><p>$\hat{E}[A] = 1/N \sum_i a_i$で求める。</p><p>これは、N人をランダムに選んだ時点でそのときにすでに年齢の確率が入っている。という考えである。<br>ほとんど大学生のクラスだったら、ランダムに選んでも大学生が多い。</p><p>モデルフリーはランダムに選んだ時点でそれは母集合を推定している、という内容に近い･･･？</p><h2 id="Passive-RL"><a href="#Passive-RL" class="headerlink" title="Passive RL"></a>Passive RL</h2><p>ここからはモデルフリーの内容。<br>目的は同じで固定された$\pi$が与えられた時、T,Rがわからない状態で$V(s)$を求めたい。<br>実際にエージェントを動かして報酬を経験し、学習する。</p><h2 id="Direct-Evaluation"><a href="#Direct-Evaluation" class="headerlink" title="Direct Evaluation"></a>Direct Evaluation</h2><p>実際に$\pi$で動かして、その結果rewardを受け取り、何回か動かしたあとの結果を平均する。<br>簡単だが得られるものが少ない。</p><h2 id="Policy-Evaluation"><a href="#Policy-Evaluation" class="headerlink" title="Policy Evaluation"></a>Policy Evaluation</h2><p>もともとのPolicy Evaluationは</p><p>$V_{k+1}^{\pi} (s) = \sum_{s’} T(s, \pi (s), s’)[R(s, \pi (s), s’) + \gamma V_{k}^\pi]$</p><p>になる。よって、行動$a=\pi(s)$は自明に定まるので、そのときの行動の期待値を計算する。<br>しかし、R, Tがここでは分かっていない。</p><p>そこで、得られた試行による$s’$を利用して計算しよう！</p><p>$sample_i = R(s, \pi(s), s_i’) + \gamma V_{k}^{\pi}$</p><p>このsampleを用いれば</p><p>$V_{k+1}^\pi(s) = 1/N \sum_i sample_i$として計算できる。</p><h2 id="Temporal-Difference-L"><a href="#Temporal-Difference-L" class="headerlink" title="Temporal Difference L"></a>Temporal Difference L</h2><p>毎回の経験から学習する手法。</p><p>transition(s, a, s’, r)を用いてV(s)を更新する。</p><p>$V^{\pi}(s) = (1-\alpha)V^\pi(s) + \alpha \times sample$<br>つまり、これまでの価値と今回の試行$sample = R(s, \pi(s), s’) + r V(s’)$によって分かった試行を<br>学習率$\alpha$を決めて計算する。</p><h2 id="Q学習"><a href="#Q学習" class="headerlink" title="Q学習"></a>Q学習</h2><p>ここまではValueを元に計算していた。<br>しかし、ここでは取るべき最適な行動を求めたいので、Valueだと都合が悪い<br>（Valueはどのぐらい状態が良いか？しか分からず行動がわからない、また、各状態の平均が取られるため本当にいいのか分かりづらい）</p><p>そこで、Q-stateに関して計算して、より行動しやすくする。<br>強化学習ではQ学習が基本らしい。</p><h2 id="Q-value-Iteration"><a href="#Q-value-Iteration" class="headerlink" title="Q-value Iteration"></a>Q-value Iteration</h2><p>$Q_0(s, a) = 0$としてinitする。</p><p>そして、</p><p>$Q_{k+1}(s, a) =\sum_{s’}T(s, a, s’)[R(s, a, s’) + \gamma \max_a’ Q_k(s’, a’)]$</p><p>この式ではVと違って、取ってきたサンプルをそのまま学習しやすい形になっている（らしい）</p><p>これは$\sum_{s’}(T ,s, a, s)$がすでに期待値のための確率になっているからである。</p><h2 id="Q学習の方法"><a href="#Q学習の方法" class="headerlink" title="Q学習の方法"></a>Q学習の方法</h2><p>まず、サンプル$(s, a, s’, r)$つまり状態sで行動aをしようとした時、状態s’に移動してしまい、報酬がrだったということを試行から情報を得る。</p><p>そして、この値を用いて</p><p>$sample = R(s, a, s’) + \gamma \max_a Q(s’, a’)$</p><p>sampleという値を今回分かった（環境から得た）R(s, a, s’)と、前回までの試行で分かっている行き先状態s’から最善の行動をすること出られるQ(s’, a’)を用いて計算する。<br>つまり、ある試行を行ったときのより正確なQ値を得る。<br>そして、</p><p>$Q(s, a) = (1-\alpha)Q(s, a) + \alpha \times sample$<br>を計算する。</p><p>これによって、行動の嬉しさがわかり<br>状態の嬉しさよりも、次にどう行動すべきかがより表現しやすくなる。</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> CS188 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-11</title>
      <link href="/2020/01/11/2020-01-11/"/>
      <url>/2020/01/11/2020-01-11/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>ABC復習</li><li>AI動画</li><li>バイト</li><li>研究考察　ー＞　わからない</li><li>ドワコン　だめです</li><li>LeetCode</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>ドワコン全然だめだった　悲しい<br>やっぱり数学要素で駄目になるなぁ　パズル･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>まとめ</li><li>AI動画</li><li>髪を切る</li><li>研究考察</li><li>卒論修正</li><li>こどふぉ</li><li>ABC</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-10</title>
      <link href="/2020/01/10/2020-01-10/"/>
      <url>/2020/01/10/2020-01-10/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>悲しい卒論の発表</li><li>悲しい卒論の完成</li><li>これからABCとこどふぉ</li><li>ゲーム理論少し勉強、おもしろい</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>悲しい卒論だぁ（秋大じゃなかったら卒業できない）</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>研究</li><li>AI動画</li><li>バイト</li><li>卒論修正</li><li>群知能の本</li><li>ドワンゴコン</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ロジスティック回帰</title>
      <link href="/2020/01/09/logistic/"/>
      <url>/2020/01/09/logistic/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="ロジスティック回帰分析とは"><a href="#ロジスティック回帰分析とは" class="headerlink" title="ロジスティック回帰分析とは"></a>ロジスティック回帰分析とは</h2><p>ロジスティック回帰分析は、説明変数$X$から<code>確率</code>を計算して<br>データが何に<code>分類</code>されるか？を求めるモデル。</p><p>たとえば、その人の特徴から男か女かを判定したりするときに使う。<br>これまでに出てきたやつだとk近傍法と同じ分類に属する。</p><p>一般化線形モデルらしい。<br>なんかよく分かってないが、どうやら正規分布でなくても良い場合らしい。<br>分類は0〜1の確率に抑えたいが、普通の回帰だと-100〜100などになってしまう。<br>そこで、logとかをつけて、強制的に確率の世界に持っていく。</p><p>$y = \beta_0 + \beta_1 x_1$を求めたいが上記のように確率にしたいので<br>$\log(p / (1-p)) = \beta_0 + \beta_1 x_1$とする。<br>これを$p$にすると</p><p>$p = \frac{1}{1 + exp(\beta_0 + \beta_1 x_1)}$となる。</p><p>これの$\beta_i$を求めたいので、これらが求まるように大量にデータを打ち込んで$\beta$の係数を予測して確率を求めて二値分類する。</p><h2 id="計算式"><a href="#計算式" class="headerlink" title="計算式"></a>計算式</h2><p>尤度関数を用いて、最適値を探す。<br>この尤度関数とは、$L(\theta)$のパラメータ$\theta$を求めたいが詳しくは知らないので<br>一番それっぽくなるように$L(\theta)$が最大になるような$\theta$を探す、というものらしい。<br>もっともらしさ？ここらへん要勉強だなぁ･･･</p><p>$N$個のデータを二値分類するとする。<br>ここで、$i$番目のデータの予測ラベル(0か1)が$t_n$であると考える確率が$y_n$とする。<br>このとき、$i$人目の予測値は</p><p>$P_i = y_i^{t_i}(1-y_i)^{1-t^i}$と表される。<br>もし$t^i = 1$なら左側だけ、そうでないなら右側だけが確率として採用される。</p><p>求めたいのはこれらの確率の積の最大化のため（全員をできるだけ分類成功する確率を最大化したいため）<br>尤度関数$L$は</p><p>$L(\beta) = \prod_i y_i^{t_i}(1-y_i)^{1-t^i}$となる。</p><p>これが最大になるように$\beta$(係数)を求めたいがこのままだと、浮動小数点で死んでしまう。<br>そこで、両辺にlogを取る。また、誤差の最小化として扱いたいのでマイナスをつける。<br>よって、</p><p>$E(\beta) = - \log (L(\beta) )=- \log (\prod_i y_i^{t_i}(1-y_i)^{1-t^i})$</p><p>上記の式を、すべての人間の分類成功$y_i$の確率の和を最大化する式として<br>交差エントロピー誤差関数と呼び、$E$の最小化を行いたい。</p><p>これは偏微分をすると</p><p>$\frac{dL(\beta)}{d\beta} = \sum_i x_i(y_i - t_i)$となる。<br>よって、正解ラベルと予測確率の積を取り、入力$x$をかけたものが偏微分による傾きになる。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>今度やる（寝る時間になってしまった）</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 機械学習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-09</title>
      <link href="/2020/01/09/2020-01-09/"/>
      <url>/2020/01/09/2020-01-09/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><p>卒論の続き<br>プラグインの拡張<br>スライド作成<br>AI動画<br>Streakで人生をつなぐ<br>虚無虚無プリン</p><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>研究をしてください、死んでしまいます<br>ぼくは研究向きですか？</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><p>卒論進捗発表<br>卒論仮完成<br>AI動画<br>ABC<br>こどふぉ</p><p>土日月で進捗を出せ〜〜〜</p><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak<ul><li>これはABCにでればいいので＞＜</li></ul></li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS188 09/20 MDP2</title>
      <link href="/2020/01/09/cs188_mdp2/"/>
      <url>/2020/01/09/cs188_mdp2/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/</a><br><a href="https://www.youtube.com/watch?v=ZToWj64rxvQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ZToWj64rxvQ</a><br><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec9/FA18_cs188_lecture9_MDPs_II_1pp.pdf" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec9/FA18_cs188_lecture9_MDPs_II_1pp.pdf</a></p><h2 id="画像"><a href="#画像" class="headerlink" title="画像"></a>画像</h2><p><img src="IMG_0366.jpg" alt><br><img src="IMG_0367.jpg" alt><br><img src="IMG_0368.jpg" alt><br><img src="IMG_0369.jpg" alt><br><img src="IMG_0370.jpg" alt></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h2 id="復習"><a href="#復習" class="headerlink" title="復習"></a>復習</h2><p>utility 割り引かれた合計の報酬<br>value sから得られる最大のutility<br>q-value q-stateから得られる期待値(maxを選ぶわけではない)</p><p>用語がにているので注意</p><h2 id="Fixed-Policy"><a href="#Fixed-Policy" class="headerlink" title="Fixed Policy"></a>Fixed Policy</h2><p>Policyについてこれまで最適しか考えてなかった。<br>より計算量が小さいものを考えたい。</p><p>ここで、固定されたPolicy$\pi(s)$があればよりシンプルに行動できる。<br>$\pi: S \to A$のように、$\pi$は状態を引数に固定されたアクションを返す。<br>つまり、ずっと上に動く、右に動くといった個体されたPolicyである。<br>よって、最適性はない。</p><p>しかし、valueの計算式は</p><p>$V^{\pi}(s) = \sum_{s’} T(s, \pi (s), s’)[R(s, \pi (s), s’) + \gamma V^{\pi}(s’)]$</p><p>となり、Actionの選択が出てこなくなる。($\pi (s)$がアクションを返すので)<br>よって計算量が軽くなる。<br>具体的には各iterationごとに$O(s^2)$に改善される。</p><h2 id="Policy-Extraction"><a href="#Policy-Extraction" class="headerlink" title="Policy Extraction"></a>Policy Extraction</h2><p>行動するための方針であるPolicyを価値から定めたいことがある。<br>つまり、今状態$s$にいるとき、同行動すればよいのだろうか？という指標がほしい。</p><p>ここで、状態$s$で行うべき最適な行動を返す関数$\pi^{*}$を<br>$\pi^{*}(s) = argmax_a Q^{*}(s, a)$</p><p>とする。つまり、ある行動$a$を決めた時最大の$Q$値が得られるような行動を決めたい！ということである。</p><p>できれば、最大の価値が得られるように動きたいのは人間も同じである。<br>行動を決めたい場合は、Q値を利用すると良い。</p><h2 id="Problems-with-value-iteration"><a href="#Problems-with-value-iteration" class="headerlink" title="Problems with value iteration"></a>Problems with value iteration</h2><p>$V_{k+1}(s) = max_a Q_k(s, a)$</p><p>でValueを更新していく。</p><p>しかし、これにはいくつか問題点が存在する。</p><ol><li>遅い</li><li>ある段階で値が変化しなくなる、つまり最大はだいたい最大である</li><li>policyは意外と早く決まる</li></ol><h2 id="Policy-Iteration"><a href="#Policy-Iteration" class="headerlink" title="Policy Iteration"></a>Policy Iteration</h2><p>この問題を解決するために、より早くするために<br>以下の処理$1, 2$を繰り返し実行することにする。</p><ol><li>Policy Evaluation<ol><li>固定されたPolicy$\pi$で永遠にValue, Utilityを計算し続ける　convergenしたら終わり</li><li>$V_{k+1}^{\pi_i} = \sum_{s’}T(s, \pi (s), s’)[R(s, \pi (s), s’) + \gamma V_k^{\pi}(s’)]$</li></ol></li><li>Policy Improvement<ol><li>計算されたulilityを用いてactionを変えることを試す</li><li>$\pi_{i+1}(s) = argmax_a \sum_{s’}T(s, s’, a)[R(s, a, s’) + V^{\pi_i}(s’)]$<ol><li>これは状態sで新たに作られるPolicyは、新しく行動aを決めて、そのときのR(s, a, s’)とEvaluationで求めた$i$における価値の和</li></ol></li></ol></li></ol><p>となる。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>MDPでは最適値を求めたいならValue iterationかpolicy iterationを使う。<br>もし、最適な行動を決めたいならpolicy iterationしよう。</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 動画講座 </tag>
            
            <tag> CS188 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-08</title>
      <link href="/2020/01/08/2020-01-08/"/>
      <url>/2020/01/08/2020-01-08/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>学校に行く</li><li>Acopyの整備</li><li>後輩向けのLaTeXリポジトリの整備</li><li>論文少し書く</li><li>AI動画</li><li>Streakをつなぐ</li><li>競プロをする</li><li>研究考えた、だめそう</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>研究考えたやつだめっぽいなぁ<br>他の仮設とかアイディア出さないとだめそう</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>スライド作成</li><li>卒論完成</li><li>AI動画</li><li>研究</li><li>競プロ復習</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多項式回帰と重回帰</title>
      <link href="/2020/01/08/poly_and_multiple/"/>
      <url>/2020/01/08/poly_and_multiple/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="多項式回帰"><a href="#多項式回帰" class="headerlink" title="多項式回帰"></a>多項式回帰</h2><p>多項式回帰(polynominal regression)は、説明変数(独立変数)$X$が多項式である回帰モデルである。<br>線形回帰よりも難しく、過学習しやすい特徴がある。</p><p>$y = \beta_0 + \beta_1 x + \beta_2 x^2 + …+ \beta_n x^n + \epsilon$</p><p>と表され、行列で表すと</p><p>$\vec{y} = X \vec{\beta} + \vec{\epsilon}$</p><p>と表される。</p><p>これは変数の種類を$m$、各変数の次元を$n$とすると$m \times n$の行列または$m$のベクトルになる。</p><h2 id="重回帰"><a href="#重回帰" class="headerlink" title="重回帰"></a>重回帰</h2><p>重回帰は独立変数（説明変数）$X$が二次元以上のものである。<br>現実のデータはほとんど重回帰である。</p><p>各説明変数ごとにエラーを小さくするように偏微分を行って各説明変数の係数を適切に変化させる。</p><p>重回帰にすると、過学習しやすくなる。<br>そのため、いくつか正規化の手法があり、これを行うと良い。</p><ul><li>変数の数を減らす<ul><li>対して重要でない変数が含まれていることが多い</li></ul></li><li>縮小推定<ul><li>リッジ回帰<ul><li>係数の絶対値を最小化する。これによって、いびつな過学習を減らす</li></ul></li><li>Lasso回帰<ul><li>いくつかの係数が０になるようにする。これによって、えぐい次数をなくす。</li></ul></li></ul></li></ul><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>今度行う</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 機械学習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>単回帰をsklearnで試す</title>
      <link href="/2020/01/08/linear_regression/"/>
      <url>/2020/01/08/linear_regression/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="線形回帰"><a href="#線形回帰" class="headerlink" title="線形回帰"></a>線形回帰</h2><p>線形回帰(linear regression)とは、目的変数$Y$と説明変数$X$から</p><p>$y = f(x)$を与えるような関数$f = X\beta + \epsilon$<br>を求めることである。<br>$X$は説明変数のベクトルで、$\beta$は係数のベクトルである。<br>$\epsilon$は係数である。</p><p>線形回帰では、複数の説明変数$x_1, x_2, …$は出てくるが二乗は出てこないことに注意する。<br>二乗が出てくると一気に難しく、過学習などの恐れが出てくる。</p><p>単回帰は説明変数が一つのみの場合であり、今回は単回帰のみをsklearnを用いて実装してみる。</p><h2 id="学習方法"><a href="#学習方法" class="headerlink" title="学習方法"></a>学習方法</h2><p>線形回帰の学習方法は主に２つ存在する。</p><ol><li>解析的</li><li>数値的</li></ol><p>である。<br>解析的はいわゆる中学で何度もやった因数分解のように代数で解く手法である。<br>一方、数値的は微分を用いて行う。</p><p>最小二乗法はモデルとの誤差$e$を求めて、この$e$が最小になるように各係数を調整する。</p><p>$\beta_i += -\frac{de}{dx_i} \times \eta$</p><h2 id="勾配降下法"><a href="#勾配降下法" class="headerlink" title="勾配降下法"></a>勾配降下法</h2><p>上記の勾配降下法において主に３つのアルゴリズムがLiniar Regressionでは利用される。</p><h3 id="バッチ勾配降下法"><a href="#バッチ勾配降下法" class="headerlink" title="バッチ勾配降下法"></a>バッチ勾配降下法</h3><p>全部のテストデータを使って学習する。<br>時間がかかる。</p><h3 id="確率的勾配降下法"><a href="#確率的勾配降下法" class="headerlink" title="確率的勾配降下法"></a>確率的勾配降下法</h3><p>ランダムに取り出して学習することを繰り返す。<br>速度は早いが不安定</p><h3 id="ミニバッチ勾配降下法"><a href="#ミニバッチ勾配降下法" class="headerlink" title="ミニバッチ勾配降下法"></a>ミニバッチ勾配降下法</h3><p>ランダムにミニバッチを作って学習する。<br>高速であり、かつ　安定しやすい。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> mglearn</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split</span><br></pre></td></tr></tbody></table></figure><p>np.random.randは<code>(x, y)</code>のように与えられた次元の0~1の行列を返す。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.rand(<span class="hljs-number">50</span>, <span class="hljs-number">1</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = <span class="hljs-number">3</span> + x * <span class="hljs-number">3</span> + np.random.rand(<span class="hljs-number">50</span>,<span class="hljs-number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>scatterで散布図をかける。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y)</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.collections.PathCollection at 0x7f3c8be4e668></code></pre><p><img src="output_3_1.png" alt="png"></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># ravelは多次元を一次元データ（ベクトル）にする</span></span><br><span class="line">lin_reg = LinearRegression().fit(x, y.ravel())</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pred_y = lin_reg.predict(x)</span><br><span class="line">plt.plot(x, pred_y)</span><br><span class="line">plt.scatter(x, y)</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.collections.PathCollection at 0x7f3c8c176a90></code></pre><p><img src="output_6_1.png" alt="png"></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># intercept 切片</span></span><br><span class="line"><span class="hljs-comment"># coefficiant 係数</span></span><br><span class="line">lin_reg.intercept_, lin_reg.coef_</span><br></pre></td></tr></tbody></table></figure><pre><code>(3.505313728559018, array([2.96289018]))</code></pre><p>SGDRegressorは数値的に微分してモデルを作る確率的勾配降下法。<br>一方LinearRegressionは解析的らしい。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> SGDRegressor</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sgd_reg = SGDRegressor(max_iter=<span class="hljs-number">100</span>, eta0=<span class="hljs-number">0.01</span>).fit(x, y.ravel())</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sgd_reg.intercept_, sgd_reg.coef_</span><br></pre></td></tr></tbody></table></figure><pre><code>(array([3.81441589]), array([2.29663001]))</code></pre><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new_x = np.array([[<span class="hljs-number">0</span>], [<span class="hljs-number">1</span>]])</span><br><span class="line">plt.plot(new_x, sgd_reg.intercept_ + sgd_reg.coef_ * new_x)</span><br><span class="line">plt.scatter(x, y)</span><br></pre></td></tr></tbody></table></figure><pre><code><matplotlib.collections.PathCollection at 0x7f3c8bcd3400></code></pre><p>おおよそ求めることができている。</p><p><img src="output_11_1.png" alt="png"></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 機械学習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS188 09/18 MDP1</title>
      <link href="/2020/01/08/cs188_mdp1/"/>
      <url>/2020/01/08/cs188_mdp1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><p><a href="https://www.youtube.com/watch?v=4LW3H_Jinr4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=4LW3H_Jinr4</a><br><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/</a><br><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec8/FA18_cs188_lecture8_MDPs_I_1pp.pdf" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec8/FA18_cs188_lecture8_MDPs_I_1pp.pdf</a></p><h2 id="画像"><a href="#画像" class="headerlink" title="画像"></a>画像</h2><p><img src="IMG_0360.jpg" alt><br><img src="IMG_0361.jpg" alt><br><img src="IMG_0362.jpg" alt><br><img src="IMG_0363.jpg" alt><br><img src="IMG_0364.jpg" alt><br><img src="IMG_0365.jpg" alt></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h2 id="非決定的探索"><a href="#非決定的探索" class="headerlink" title="非決定的探索"></a>非決定的探索</h2><p>これまで扱った探索は、決定的であり、思った行動が必ず取れていた。<br>しかし、現実は思った行動が失敗したり、ロボットは動かないこともある。</p><p>よって、確率的に探索を行う、非決定的探索を扱う。</p><h2 id="グリッド"><a href="#グリッド" class="headerlink" title="グリッド"></a>グリッド</h2><p>グリッド状でロボットが動くことを考える。<br>ロボットは毎回の移動でliving reward、そしてゴールかpitで+1, -1のrewardを貰う。</p><h2 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h2><p>ロボットはActionを各状態にそって、取ることができる。<br>しかし、必ず重い道理には行かず</p><p>上に行きたい！　としても　右に動くこともある。<br>これが非決定的である。</p><h2 id="MDPの定義"><a href="#MDPの定義" class="headerlink" title="MDPの定義"></a>MDPの定義</h2><ul><li>state $s \in S$</li><li>actions $a \in A$</li><li>transition function $T(s, a, s’)$<ul><li>状態sから行動aを取る！と決めたあと、状態s’に動く確率</li><li>必ずs’に行くわけではないため</li><li>つまり$P(s’ | s, a)$である</li></ul></li><li>reward function $R(s, a, s’)$<ul><li>たまにR(s’), R(s)と書いたりする</li></ul></li></ul><h2 id="マルコフ"><a href="#マルコフ" class="headerlink" title="マルコフ"></a>マルコフ</h2><p>マルコフは有名な人。</p><p>言っていることは、今これから起こることは昔に依存しない！ということ。</p><p>$P(S_{t+1} = s’ | S_t = s_t, S_{t-1}=s_{t-1}…)$<br>$= P(S_{t+1}=s’)$<br>となる。</p><p>過去に依存しない。</p><h2 id="Policy"><a href="#Policy" class="headerlink" title="Policy"></a>Policy</h2><p>決定的ならば、探索の深さ内なら（すべて探索すると計算量がひどいため）<br>自由に行動できる。</p><p>しかし、非決定的のため、Policy（方針）に従って行動することにする。</p><p>$policy \ \pi^{*}: S \to A$</p><p>policyは上記のように$\pi$を用いて表され、状態集合$S$から、行動への写像を行う関数である。</p><p>最適なPolicyはexpected rewardが最大であり、そのようなPolicyには*をつけて表す。<br>各状態によって、取るべき行動がPolicyが定まることで一意に決まる。</p><h2 id="MDP-Tree"><a href="#MDP-Tree" class="headerlink" title="MDP Tree"></a>MDP Tree</h2><p>MDPをわかりやすく表すTree.<br>詳しくは画像参照。</p><p>現在の状態$s$では、複数の行動$a$を取ることができる。<br>ここで、取った状態を$q = (s, a)$とする。（つまり行動$a$を決めたとき）<br>しかし、行動$a$を取るとしても行き先の状態$s’$は固定ではない。ミスをしたりするからである。<br>よって、その遷移を$T(s, a, s’)$と表す。</p><p>画像では丸がq-state、三角が状態である。</p><h2 id="Discounting"><a href="#Discounting" class="headerlink" title="Discounting"></a>Discounting</h2><p>できる限り今の報酬を大きい影響力を持たせるために（遠い未来は確実性がないため）<br>遠い未来には割引率$\gamma$を累乗する。<br>このガンマは、現実世界に適用しており、数学的に扱いやすい。</p><h2 id="Optimal-Quantities-最適量"><a href="#Optimal-Quantities-最適量" class="headerlink" title="Optimal Quantities(最適量)"></a>Optimal Quantities(最適量)</h2><p>MDPによる行動を決めるために必要な変数を記す。</p><ul><li>$V^{*}(s)$<ul><li>状態$s$から最適な行動$a$を選ぶことで得られる最大のreward, utility</li></ul></li><li>$Q^{*}(s, a)$<ul><li>状態$s$から行動$a$を行うと決めたあとで、最適な行動をしたときに得られる最大の期待値reward, utility</li></ul></li><li>$\pi^{*}(s)$<ul><li>sで行うべき行動を返す関数</li></ul></li></ul><h2 id="Value-of-States"><a href="#Value-of-States" class="headerlink" title="Value of States"></a>Value of States</h2><p>各状態のValueを計算する。<br>このValueを利用して、Policyが定まるらしい</p><p>$V^{*}(s) = \max_{a} Q(s, a)$</p><p>状態sの価値は、sから行動aを選んで得られる最大のq-stateの価値である。</p><p>$Q^{*}(s, a) = \sum_{s’} T(s, a, s’)[R(s, a, s’) + \gamma V^{*}(s’)]$</p><p>q-stateの価値は、行動aを行って確率的にs’にいくため、その遷移確率と価値をかけて期待値を求める。<br>また、内部の価値はこのT(s, a, s’)で得られるliving rewardと 割り引かれた状態$s’$の価値の和になる。</p><p>この２つの式をくっつけることができる。</p><h2 id="Time-Limited-Value"><a href="#Time-Limited-Value" class="headerlink" title="Time Limited Value"></a>Time Limited Value</h2><p>このVの計算が永遠に木が続いて計算できないことがある。</p><p>そこで、深さ$k$を定めて、そのときの最大の価値を求める。<br>これによって、計算量が改善される。</p><p>$V_k(s)$は深さ$k$での最適なmaxを考える。</p><p>これを求めるには以下の手順を踏む。</p><ol><li>$V_0(s)$をまず0にする</li><li>$V_{k+1}(s) = \max_a \sum_{s’} T(s, a, s’)[R(s, a, s’) + \gamma V_{k}(s)]$をボトムアップに計算する。</li></ol><p>ただし、実際は再帰関数などでトップダウンに実装する<br>（内部的にはボトムアップになる）</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 動画講座 </tag>
            
            <tag> CS188 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS188 9/13 expectimax</title>
      <link href="/2020/01/08/cs188_expectimax/"/>
      <url>/2020/01/08/cs188_expectimax/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/index.html" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/index.html</a></p><p><a href="https://www.youtube.com/watch?v=n3A29GEzC6g" target="_blank" rel="noopener">https://www.youtube.com/watch?v=n3A29GEzC6g</a></p><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec7/FA18_cs188_lecture7_expectimax_search_and_utilities_1pp.pdf" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec7/FA18_cs188_lecture7_expectimax_search_and_utilities_1pp.pdf</a></p><h2 id="画像"><a href="#画像" class="headerlink" title="画像"></a>画像</h2><p><img src="IMG_0354.jpg" alt><br><img src="IMG_0355.jpg" alt><br><img src="IMG_0356.jpg" alt><br><img src="IMG_0357.jpg" alt><br><img src="IMG_0358.jpg" alt><br><img src="IMG_0359.jpg" alt></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h2 id="Expectimax-Search"><a href="#Expectimax-Search" class="headerlink" title="Expectimax Search"></a>Expectimax Search</h2><p>前回はMinMax探索を行った。<br>ゼロサムゲームにおいて、相手は自分の最小化を行ってくる。<br>自分はmax, 相手はminを行う。</p><p>ここで、相手が必ずminを行うとは限らない。<br>予測できない可能性もあるからである。</p><p>よって、確率的な要素を取り入れて、期待値の最大化を行うような探索を行う。</p><h2 id="確率の思い出し"><a href="#確率の思い出し" class="headerlink" title="確率の思い出し"></a>確率の思い出し</h2><p>random variableは、結果がわからない事象を表す。<br>probability distributionは、random variableに与える確率分布の割付である。</p><p>よって、交通量なら</p><p>変数$T$は　混んでいるか？の状態を表す。<br>$T$はnone, light, heavyの３状態を取る。<br>distributionとして<code>P(T=none) = 0.3</code>のように確率を当たえる。<br>条件付き確率は$P(T= none |  time =8am) = 0.8$のように表す。</p><h2 id="複数レイヤー"><a href="#複数レイヤー" class="headerlink" title="複数レイヤー"></a>複数レイヤー</h2><p>二人だけではなく、複数のプレイヤーが自分の報酬を最大化しようと行動することがある。<br>この場合も、MinMaxのように考えられる。</p><h2 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h2><p>Utilitiは、結果から得られる関数であり、エージェントの好みを表す。<br>つまり、これによって、エージェントは動きを変える。</p><h2 id="Preference"><a href="#Preference" class="headerlink" title="Preference"></a>Preference</h2><ul><li>Prize: A, B</li><li>Lotteries<ul><li>L = [p, A; (1-p), B;]</li><li>のように書くとする。</li></ul></li></ul><p>これは、不確かな状況における、くじ引きのようなLを表す。</p><p>ここからのNotation(表記)として</p><p>Aの賞品のほうが好みなら、$A \succ B$と表す。<br>また、同じぐらいなら$A \sim B$と表す。</p><h2 id="Axiom-公理"><a href="#Axiom-公理" class="headerlink" title="Axiom(公理)"></a>Axiom(公理)</h2><h3 id="Transivity-推移則"><a href="#Transivity-推移則" class="headerlink" title="Transivity(推移則)"></a>Transivity(推移則)</h3><p>$(A \succ B) \cap (B \succ C) \Rightarrow (A \succ C) $</p><p>これがないと永遠にループしたりする</p><h3 id="Continuity"><a href="#Continuity" class="headerlink" title="Continuity"></a>Continuity</h3><p>$A \succ B \succ C \Rightarrow {\exists} p[p, A; 1-p, C] \sim B$</p><h3 id="Substinuinability"><a href="#Substinuinability" class="headerlink" title="Substinuinability"></a>Substinuinability</h3><p>$A \sim B \Rightarrow [p, A; 1-p, C] \sim [p, B; 1-p, C]$</p><h2 id="MEU-Maximun-Expected-Utility"><a href="#MEU-Maximun-Expected-Utility" class="headerlink" title="MEU Maximun Expected Utility"></a>MEU Maximun Expected Utility</h2><p>上記の公理を満たす好みがあるとき、関数$U$が定義できる。</p><p>$U(A) \geq U(B) \Leftrightarrow A \succ B$</p><p>$U([p_i , s_i]) = \sum_i p_i U(s_i)$</p><p>期待値は確率とある事象$s$に対する、好みを関数から値を取り出した$U(s_i)$の積になる。</p><p>MEUによって、エージェントは合理的に行動する。</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 動画講座 </tag>
            
            <tag> CS188 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-07</title>
      <link href="/2020/01/07/2020-01-07/"/>
      <url>/2020/01/07/2020-01-07/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>朝起きる</li><li>学校に行く</li><li>卒論を書く</li><li>終わった？（終わってないし、出来が悪い）</li><li>来年の４年生に向けたLaTeXテンプレートをガバガバで書く</li><li>帰ってAI動画をやる</li><li>Streakをつなぐ</li><li>研究をすすめる</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>今日は比較的がんばれたかも</p><p>明日も適度にがんばりたいなぁ</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>卒論ACO進める</li><li>PAKEN復習</li><li>研究進める</li><li>AI動画</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k近傍法をsklearnで試してみる</title>
      <link href="/2020/01/07/k_neighbors/"/>
      <url>/2020/01/07/k_neighbors/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="動画リンク"><a href="#動画リンク" class="headerlink" title="動画リンク"></a>動画リンク</h2><p><a href="https://www.youtube.com/watch?v=4Vk1UhRDB34&list=PLdG31GUo-My_YlVF8BClMDBaJ0IJyEFjS&index=3&t=0s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=4Vk1UhRDB34&list=PLdG31GUo-My_YlVF8BClMDBaJ0IJyEFjS&index=3&t=0s</a></p><hr><h2 id="k近傍法"><a href="#k近傍法" class="headerlink" title="k近傍法"></a>k近傍法</h2><p>k近傍法は、ユークリッド距離などを用いて未知のデータを、いくつか存在するクラスに割り当てるアルゴリズムです。<br>つまり、いわゆる教師あり学習に入ります。</p><p>未知の特徴ベクトル$x$がどの分類クラス$y’$かを予測するために<br>すでに教師あり学習で学んだ$N$個のデータと距離を比較します。<br>そして、一番近い$K$個のラベルを取り出し、そのうち、多数決で$x$のラベルを推測します。</p><p>$K$がある程度小さいほど精度は増しますが、外れ値のようなノイズに左右されやすくなります。<br>また、$K$が大きくなると、平均的には良いですが、境界値などで他のクラスに多く引っ張られるため精度が下がります。<br>適切な$K$を自分で探す必要があります。</p><h2 id="メリット・デメリット"><a href="#メリット・デメリット" class="headerlink" title="メリット・デメリット"></a>メリット・デメリット</h2><ul><li>メリット<ul><li>理解しやすい</li><li>単純だが意外とうまくいく</li></ul></li><li>デメリット<ul><li>計算量が次元の増加にともなってでかくなる</li></ul></li></ul><hr><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>mglearnを先にインストールしておきます。<br>Jupyter Notebookでは<code>!</code>をつけるとコマンドを利用することができます。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install mglearn</span><br></pre></td></tr></tbody></table></figure><pre><code>Requirement already satisfied: mglearn in /opt/conda/lib/python3.7/site-packages (0.1.7)Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.7/site-packages (from mglearn) (0.21.3)Requirement already satisfied: matplotlib in /opt/conda/lib/python3.7/site-packages (from mglearn) (3.1.1)Requirement already satisfied: imageio in /opt/conda/lib/python3.7/site-packages (from mglearn) (2.6.1)Requirement already satisfied: pillow in /opt/conda/lib/python3.7/site-packages (from mglearn) (6.2.1)Requirement already satisfied: pandas in /opt/conda/lib/python3.7/site-packages (from mglearn) (0.25.3)Requirement already satisfied: cycler in /opt/conda/lib/python3.7/site-packages (from mglearn) (0.10.0)Requirement already satisfied: numpy in /opt/conda/lib/python3.7/site-packages (from mglearn) (1.17.3)Requirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.7/site-packages (from scikit-learn->mglearn) (0.14.0)Requirement already satisfied: scipy>=0.17.0 in /opt/conda/lib/python3.7/site-packages (from scikit-learn->mglearn) (1.3.2)Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->mglearn) (1.1.0)Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->mglearn) (2.8.1)Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /opt/conda/lib/python3.7/site-packages (from matplotlib->mglearn) (2.4.5)Requirement already satisfied: pytz>=2017.2 in /opt/conda/lib/python3.7/site-packages (from pandas->mglearn) (2019.3)Requirement already satisfied: six in /opt/conda/lib/python3.7/site-packages (from cycler->mglearn) (1.13.0)Requirement already satisfied: setuptools in /opt/conda/lib/python3.7/site-packages (from kiwisolver>=1.0.1->matplotlib->mglearn) (42.0.2.post20191201)</code></pre><p>sklearnのtrain_test_splitは、データを訓練データとテストデータに分割してくれます。<br>パラメータによっては元のデータのバランスを崩さないようにデータを分割してくれます。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split</span><br></pre></td></tr></tbody></table></figure><p>irisと呼ばれるsklearnのデータセットを利用します。<br>irisは3種類の花を分類するデータセットです。</p><p>額の大きさなど4つの特徴量が存在し、0,1,2の3クラスに高精度に分類することが目的です。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># mglearnは機械学習の本用に作られたライブラリらしい</span></span><br><span class="line"><span class="hljs-keyword">import</span> mglearn</span><br><span class="line">iris = load_iris()</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(iris.DESCR)</span><br></pre></td></tr></tbody></table></figure><pre><code>.. _iris_dataset:Iris plants dataset--------------------**Data Set Characteristics:**    :Number of Instances: 150 (50 in each of three classes)    :Number of Attributes: 4 numeric, predictive attributes and the class    :Attribute Information:        - sepal length in cm        - sepal width in cm        - petal length in cm        - petal width in cm        - class:                - Iris-Setosa                - Iris-Versicolour                - Iris-Virginica    :Summary Statistics:    ============== ==== ==== ======= ===== ====================                    Min  Max   Mean    SD   Class Correlation    ============== ==== ==== ======= ===== ====================    sepal length:   4.3  7.9   5.84   0.83    0.7826    sepal width:    2.0  4.4   3.05   0.43   -0.4194    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)    ============== ==== ==== ======= ===== ====================    :Missing Attribute Values: None    :Class Distribution: 33.3% for each of 3 classes.    :Creator: R.A. Fisher    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)    :Date: July, 1988The famous Iris database, first used by Sir R.A. Fisher. The dataset is takenfrom Fisher's paper. Note that it's the same as in R, but not as in the UCIMachine Learning Repository, which has two wrong data points.This is perhaps the best known database to be found in thepattern recognition literature.  Fisher's paper is a classic in the field andis referenced frequently to this day.  (See Duda & Hart, for example.)  Thedata set contains 3 classes of 50 instances each, where each class refers to atype of iris plant.  One class is linearly separable from the other 2; thelatter are NOT linearly separable from each other... topic:: References   - Fisher, R.A. "The use of multiple measurements in taxonomic problems"     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to     Mathematical Statistics" (John Wiley, NY, 1950).   - Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System     Structure and Classification Rule for Recognition in Partially Exposed     Environments".  IEEE Transactions on Pattern Analysis and Machine     Intelligence, Vol. PAMI-2, No. 1, 67-71.   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions     on Information Theory, May 1972, 431-433.   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II     conceptual clustering system finds 3 classes in the data.   - Many, many more ...</code></pre><p>150個のデータと4次元の特徴量が存在します。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(iris.data.shape)</span><br></pre></td></tr></tbody></table></figure><pre><code>(150, 4)</code></pre><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(iris.data[<span class="hljs-number">0</span>])</span><br></pre></td></tr></tbody></table></figure><pre><code>[5.1 3.5 1.4 0.2]</code></pre><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(iris.target_names)</span><br></pre></td></tr></tbody></table></figure><pre><code>['setosa' 'versicolor' 'virginica']</code></pre><p>targetに分類が格納されています。<br>$X, Y$を分類するのが通例のようです。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(iris.target.shape, iris.target)</span><br></pre></td></tr></tbody></table></figure><pre><code>(150,) [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2]</code></pre><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = iris.data</span><br><span class="line">Y = iris.target</span><br></pre></td></tr></tbody></table></figure><p>pandasのcolumnsに何も設定しないと、通常0,1,..のように連番が振られますが<br>文字列を指定できます。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame(X, columns=iris.feature_names).head()</span><br></pre></td></tr></tbody></table></figure><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>sepal length (cm)</th>      <th>sepal width (cm)</th>      <th>petal length (cm)</th>      <th>petal width (cm)</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>5.1</td>      <td>3.5</td>      <td>1.4</td>      <td>0.2</td>    </tr>    <tr>      <th>1</th>      <td>4.9</td>      <td>3.0</td>      <td>1.4</td>      <td>0.2</td>    </tr>    <tr>      <th>2</th>      <td>4.7</td>      <td>3.2</td>      <td>1.3</td>      <td>0.2</td>    </tr>    <tr>      <th>3</th>      <td>4.6</td>      <td>3.1</td>      <td>1.5</td>      <td>0.2</td>    </tr>    <tr>      <th>4</th>      <td>5.0</td>      <td>3.6</td>      <td>1.4</td>      <td>0.2</td>    </tr>  </tbody></table></div><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># random_state = 0とすることで、シードが固定値になる</span></span><br><span class="line">X_train, X_test, Y_train, Y_test = train_test_split(X, Y, random_state=<span class="hljs-number">0</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># K-近傍法</span></span><br><span class="line"><span class="hljs-keyword">from</span> sklearn.neighbors <span class="hljs-keyword">import</span> KNeighborsClassifier</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list_k = []</span><br><span class="line">list_score = []</span><br></pre></td></tr></tbody></table></figure><p>sklearn.neighborsのKNeighborsClassifierを利用して<br>訓練を行います。</p><p>fitは多くのライブラリで共通の訓練メソッド<br>そして、predictは予測メソッドです。</p><p>scoreでテストデータがどれくらい正しいかを計算することができます。<br>ここで大切なのが、テストデータで正しいかを判定するということです。（決して訓練データで行ってはいけない）</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>):</span><br><span class="line">    knc = KNeighborsClassifier(n_neighbors=k)</span><br><span class="line">    knc.fit(X_train, Y_train)</span><br><span class="line">    </span><br><span class="line">    Y_pred = knc.predict(X_test)</span><br><span class="line">    print(Y_pred)</span><br><span class="line">    </span><br><span class="line">    score = knc.score(X_test, Y_test)</span><br><span class="line">    print(<span class="hljs-string">"[%d] score: {:.2f}"</span>.format(score) % k)</span><br><span class="line">    </span><br><span class="line">    list_k.append(k)</span><br><span class="line">    list_score.append(score)</span><br></pre></td></tr></tbody></table></figure><pre><code>[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][1] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][2] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][3] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][4] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][5] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][6] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][7] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][8] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][9] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][10] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][11] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][12] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][13] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][14] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][15] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][16] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][17] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][18] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][19] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][20] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][21] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][22] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][23] score: 0.97[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 1 0 0 1 1 0 2 1 0 2 2 1 0 2][24] score: 0.95[2 1 0 2 0 2 0 1 2 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][25] score: 0.95[2 1 0 2 0 2 0 1 2 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][26] score: 0.95[2 1 0 2 0 2 0 1 2 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 2 0 0 1 1 0 2 1 0 2 2 1 0 2][27] score: 0.95[2 1 0 2 0 2 0 1 2 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 1 0 0 1 1 0 2 1 0 2 2 1 0 2][28] score: 0.92[2 1 0 2 0 2 0 2 2 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 1 0 0 1 1 0 2 1 0 2 2 1 0 2][29] score: 0.89[2 1 0 2 0 2 0 1 1 1 2 1 1 1 1 0 1 1 0 0 2 1 0 0 1 0 0 1 1 0 2 1 0 2 2 1 0 2][30] score: 0.95</code></pre><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.ylim(<span class="hljs-number">0.9</span>, <span class="hljs-number">1.0</span>)</span><br><span class="line">plt.xlabel(<span class="hljs-string">"n_neibors"</span>)</span><br><span class="line">plt.ylabel(<span class="hljs-string">"score"</span>)</span><br><span class="line">plt.plot(list_k, list_score)</span><br></pre></td></tr></tbody></table></figure><pre><code>[<matplotlib.lines.Line2D at 0x7f00879039e8>]</code></pre><p><img src="output_14_1.png" alt="png"></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> pandas.plotting <span class="hljs-keyword">import</span> scatter_matrix</span><br></pre></td></tr></tbody></table></figure><p>scatter_matrixと呼ばれる図のようです。</p><p>複数の次元（今回の場合は４つの特徴量なので４）をそれぞれ組合せてどのように散布図が描かれるかを示します。</p><p>この図を見ると、ほとんどの2つの特徴量の組合せで大体は分類できそうということが分かります。</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iris_dataframe = pd.DataFrame(X_train, columns=iris.feature_names)</span><br><span class="line">scatter_matrix(iris_dataframe, c=Y_train, figsize=(<span class="hljs-number">15</span>, <span class="hljs-number">15</span>), marker=<span class="hljs-string">'o'</span>, hist_kwds={<span class="hljs-string">'bins'</span>: <span class="hljs-number">20</span>}, s=<span class="hljs-number">60</span>, alpha=<span class="hljs-number">.8</span>, cmap=mglearn.cm3 )</span><br></pre></td></tr></tbody></table></figure><pre><code>array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f0087bc87f0>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0084b11400>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0084afec18>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0084aafd68>],       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f0084a5ceb8>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0084a1b048>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f008878dcf8>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f0084b179b0>],       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f0084b17c18>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f00878fae80>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f00849ae748>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f008495fcf8>],       [<matplotlib.axes._subplots.AxesSubplot object at 0x7f008491d2e8>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f00848cc898>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f00848ffe48>,        <matplotlib.axes._subplots.AxesSubplot object at 0x7f00848b9438>]],      dtype=object)</code></pre><p><img src="output_16_1.png" alt="png"></p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>KNNはシンプルながら、意外とうまく性能が出そう、<br>ただ次元数が多いと実行時間かかりそうだなぁという印象がある。</p><p>今回はブログを多く参考にさせてもらったため、<br>今度は公式ドキュメントを元に自分で書いていきたい。</p><h2 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h2><ul><li><a href="https://blog.amedama.jp/entry/2017/03/18/140238" target="_blank" rel="noopener">Python: k 近傍法を実装してみる</a></li><li><a href="https://analytics-note.xyz/programming/pandas-scatter-matrix/" target="_blank" rel="noopener">pandasで散布図行列を書く</a></li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 動画講座 </tag>
            
            <tag> 機械学習 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS 188 09/11 Minimax</title>
      <link href="/2020/01/06/cs188_minimax/"/>
      <url>/2020/01/06/cs188_minimax/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><div class="video-container"><iframe src="https://www.youtube.com/embed/v6RgZBjc8og" frameborder="0" loading="lazy" allowfullscreen></iframe></div><div class="row">    <embed src="https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec6/FA18_cs188_lecture6_adversarial_search_1pp.pdf" width="100%" height="550" type="application/pdf"></div><hr><h2 id="画像"><a href="#画像" class="headerlink" title="画像"></a>画像</h2><p><img src="img1.jpg" alt><br><img src="img2.jpg" alt><br><img src="img3.jpg" alt><br><img src="img4.jpg" alt></p><hr><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h3><p>GameはいくらかのAxes（分類）がなされる。</p><ul><li>決定的か？確率的か？<ul><li>確率的なら麻雀とか</li></ul></li><li>ゼロサムゲームか？<ul><li>対戦型</li></ul></li><li>完全情報ゲームか？</li></ul><h3 id="決定的の変数"><a href="#決定的の変数" class="headerlink" title="決定的の変数"></a>決定的の変数</h3><ul><li>State</li><li>Players</li><li>Actions</li><li>Transmition Function $SxA \to S$<ul><li>集合のアレ、わすれた</li></ul></li></ul><p>プレイヤーのSolution（解決策）は、policy$S\to A$によって、定義される<br>つまり、方針によって、状態$S$で取る行動$A$が定まる。</p><h3 id="Value-of-State"><a href="#Value-of-State" class="headerlink" title="Value of State"></a>Value of State</h3><p>$V(s)=状態sから達成できる最大のスコア$<br>と定義する。</p><p>再帰的には</p><p>$V(s) = \max_{s’ \in children(s)} V(s’)$</p><p>と示すことができる。</p><h3 id="Adversaial-tree"><a href="#Adversaial-tree" class="headerlink" title="Adversaial tree"></a>Adversaial tree</h3><p>一人のゲームなら上記の最大スコアをツリーの子から選べば良いが<br>敵がいる場合が存在する。</p><p>この場合、</p><ul><li>自分は最大になるように行動する</li><li>相手は最小になるように行動する</li></ul><p>$minmax$な行動を行う。</p><p>これをpythonっぽく書くと</p><figure class="highlight py hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">max_value</span><span class="hljs-params">(s)</span>:</span></span><br><span class="line">  v = -inf</span><br><span class="line">  <span class="hljs-keyword">for</span> ns <span class="hljs-keyword">in</span> s:</span><br><span class="line">    v = max(v, min_value(ns))</span><br><span class="line">  <span class="hljs-keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">min_value</span><span class="hljs-params">(s)</span>:</span></span><br><span class="line">  v = inf</span><br><span class="line">  <span class="hljs-keyword">for</span> ns <span class="hljs-keyword">in</span> s:</span><br><span class="line">    v = min(v, max_value(ns))</span><br><span class="line">  <span class="hljs-keyword">return</span> v</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f</span><span class="hljs-params">(player, s)</span>:</span></span><br><span class="line">  <span class="hljs-keyword">if</span> s == fin:</span><br><span class="line">    <span class="hljs-keyword">return</span> value(fin)</span><br><span class="line">  <span class="hljs-keyword">if</span> player == <span class="hljs-number">1</span>:</span><br><span class="line">    max_value(s)</span><br><span class="line">  <span class="hljs-keyword">else</span>:</span><br><span class="line">    min_value(s)</span><br></pre></td></tr></tbody></table></figure><p>のようになる。</p><h3 id="計算量"><a href="#計算量" class="headerlink" title="計算量"></a>計算量</h3><p>MIN_MAXの計算量は、深さを$m$、各ノードからの子供の数を$b$とすると<br>$O(b^m)$となる。</p><p>でかいね。</p><h3 id="Alpha-Beta-Pruning"><a href="#Alpha-Beta-Pruning" class="headerlink" title="Alpha Beta Pruning"></a>Alpha Beta Pruning</h3><p>いわゆる枝刈り高速化。</p><p>例えば、すでに他の枝でmaxの候補が10だとする。<br>このとき、別の枝でminの候補が3となったとき、このmin以下の枝は探索しなくて良い。<br>なぜなら、この枝は相手によって3となり、自分は絶対に10を選んだほうが良いからである。</p><p>よって、これをPythonで書くと</p><figure class="highlight py hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">min_value</span><span class="hljs-params">(s, a, b)</span>:</span></span><br><span class="line">  v = inf</span><br><span class="line">  <span class="hljs-keyword">for</span> ns <span class="hljs-keyword">in</span> s:</span><br><span class="line">    v = min(v, max_value(ns, a, b))</span><br><span class="line">    <span class="hljs-keyword">if</span> v <= a:</span><br><span class="line">      <span class="hljs-keyword">return</span> v</span><br><span class="line">    b = min(b, v)</span><br><span class="line">  <span class="hljs-keyword">return</span> v</span><br></pre></td></tr></tbody></table></figure><p>ここで、</p><ul><li>$a$=根から頂点uまでのパス上のMAXの最適選択</li><li>$b$=根から頂点uまでのパス上のMINの最適選択</li></ul><p>とする。<br>これによって、計算量を$O(b^{m/2})$まで落とせるらしい。</p><h3 id="Depth-Limited-Search"><a href="#Depth-Limited-Search" class="headerlink" title="Depth Limited Search"></a>Depth Limited Search</h3><p>深さ制限探索。<br>上記のAlpha, BetaPruningを入れても<br>十分計算量はでかい。</p><p>そのため、現実的なゲーム理論では、深さ$k$を決めて、そこまでの探索をおこなうしかない。</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 動画講座 </tag>
            
            <tag> CS188 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-06</title>
      <link href="/2020/01/06/2020-01-06/"/>
      <url>/2020/01/06/2020-01-06/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>朝起きる</li><li>学校に行く</li><li>卒論を書きます</li><li>帰ります</li><li>Streakをつなぐ</li><li>AI動画をやる</li><li>PAKEN2019 Day3の復習　むずい</li><li>寝る時間、はやすぎないか？</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>一日が早すぎるな、訴訟</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>卒論を書く</li><li>スライドを作る</li><li>AI動画</li><li>PAKEN Day4の復習</li><li>けんきう進める</li></ul><p>7:30について13:30に🐸</p><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak<!-- - バイト --></li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>youtubeの高評価した動画リストを一括削除する</title>
      <link href="/2020/01/05/youtube_erase/"/>
      <url>/2020/01/05/youtube_erase/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>YouTubeの高評価した動画リストを一括削除して<br>これまでのユーザ履歴を全部なくしたいなぁになりました。</p><p>しかし、標準のYoutubeには、一個一個手打ちで高評価した動画をリストしか削除するしかありません。<br>これは面倒です＞＜</p><h2 id="対処法"><a href="#対処法" class="headerlink" title="対処法"></a>対処法</h2><ul><li><a href="https://www.youtube.com/watch?v=Tch0wg5ADD8" target="_blank" rel="noopener">この動画</a></li></ul><p>を元に作業をしました。</p><p>まず、高く評価した動画リストを開いてください。</p><p><img src="high.png" alt></p><p>このとき、URLは</p><p><a href="https://www.youtube.com/playlist?list=LLPTKMrRh8989w" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=LLPTKMrRh8989w</a><br>みたいな感じになっています。</p><p>ここで、<br><code>&disable_polymer=true</code>というパラメータを上記のリンクに追加してください。<br>つまり</p><p><code>https://www.youtube.com/playlist?list=LLPTKMrRh8989w&disable_polymer=true</code><br>のようになります。</p><p>こうすると、昔のYouTubeっぽい各リストごとの編集ページになるため</p><p>あとはChromeのデベロッパーツールから<br>Consoleに</p><figure class="highlight js hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> items = $(<span class="hljs-string">'body'</span>).getElementsByClassName(<span class="hljs-string">"pl-video-edit-remove-liked-video"</span>); </span><br><span class="line">    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i < items.length; i++){</span><br><span class="line">        items[i].click();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>と打ち込んであげてください。</p><p>JSのやっていることは直感的だと思います。</p><p>難しいのは、現在この各リストごとの編集ページになるパラメータが<br>ユーザが直接存在するしか手段がないことっぽいところですね＞＜<br>（昔は鉛筆みたいなアイコンからこれに行けたんですが、消されたのでパラメータ直接打ち込むしかないようです）</p><p>とりあえず、これで視聴履歴がすっきりしたので良かったです</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> youtube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-04</title>
      <link href="/2020/01/03/2020-01-04_diary/"/>
      <url>/2020/01/03/2020-01-04_diary/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>友達と遊んだ</li><li>CodeforcesHelloにでた、Dが解けない</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>久しぶりに遊ぶと楽しい、<br>感傷に浸る、<br>人生いろいろあるなぁと思った</p><p>勉強頑張らなきゃなぁ</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>研究発表スライド仮作成</li><li>競プロ復習</li><li>AI動画</li><li>シェルスクリプト記事書き</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-03</title>
      <link href="/2020/01/03/2020-01-03/"/>
      <url>/2020/01/03/2020-01-03/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>なにもない</li><li>このブログの修正を少ししたぐらい</li><li>一日中進路について悩んでいた</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>来年進学する大学院の指導教員の方に相談させていただいた。</p><p>本当にありがたかった。</p><p>がんばるぞい！！！！</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>研究考える</li><li>競プロ復習</li><li>スライド作成</li><li>バイト</li><li>こどふぉ</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitalkでNot Foundというエラーが表示されるときの対処法</title>
      <link href="/2020/01/03/gitalk_not_found/"/>
      <url>/2020/01/03/gitalk_not_found/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>現在このブログでは、<a href="https://github.com/Fechin/hexo-theme-diaspora" target="_blank" rel="noopener">diaspora</a><br>とよばれるテーマを利用しています。</p><p>このテーマでは<a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a>と呼ばれるGitHubのIssueを利用してコメントが利用できるリポジトリを利用しています。</p><p><img src="gitalk.png" alt></p><p>しかし、あるときこちらのGitalkが</p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error Not Found</span><br></pre></td></tr></tbody></table></figure><p>というエラーを出して動かなくなりました。</p><p>このとき、Gitalkのプロパティ<br>createIssueManyallyなどをテーマに追加していたりしていたので<br>これが原因かなぁとか思いながら修正していたんですが、治らずずっと試行錯誤していました。</p><h2 id="改善策"><a href="#改善策" class="headerlink" title="改善策"></a>改善策</h2><p>自分のブログは</p><ul><li>ganariya_blog</li><li>ganariya.github.io</li></ul><p>という2つのリポジトリで構成されていて<br>ganariya_blogは生成前のmdなどを管理するリポジトリ<br>ganariya.github.ioは公開用でganariya_blogで生成したものをデプロイするリポジトリになっていました。</p><p>もともと、ganariya_blogのみ非公開で<br>ganariya.github.ioは、Publicにしていました。</p><p>どうやら、GitalkはPublicなリポジトリでしか機能しないようです。（それもそうか）<br>そのため、ganariya.github.ioもprivateにするか〜としたせいで、Not Foundになっていたようです。</p><p>よって、公開先であるganariya.github.ioをPublicに戻してあげたらうまく動作しました。</p><p>このページのGitalkもうまく動いているはずです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>Gitalkでなにかエラーがありましたら<br>ぜひコメントで相談していただければと思います！<br>少しながらでも参考になればと思います！<br>ガナリヤでした！</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> gitalk </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-02</title>
      <link href="/2020/01/02/2020-01-02/"/>
      <url>/2020/01/02/2020-01-02/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>シェルスクリプトの勉強</li><li>研究を考えた　思い浮かばない</li><li>バイトをした</li><li>日経コンの復習　DPできない</li><li>こどふぉ608のバチャ　あとで復習</li><li>ブログの記事書いた</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>研究ができない、どうしようかな<br>論文の読み方とか勉強の仕方がだめなんだろうなぁ･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>研究を考える　evil ant</li><li>バイト</li><li>競プロ復習</li><li>シェルスクリプト記事</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo基本コマンド+プラグイン</title>
      <link href="/2020/01/02/hexo_command/"/>
      <url>/2020/01/02/hexo_command/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/2020/01/02/hexo_command/">前回</a></p><p>hexoの導入で引っかかりやすい点についてまとめました。</p><p>今回は、自分が必要なコマンド集やプラグインのまとめを行おうと思います。</p><h2 id="コマンド集"><a href="#コマンド集" class="headerlink" title="コマンド集"></a>コマンド集</h2><h3 id="ページ生成"><a href="#ページ生成" class="headerlink" title="ページ生成"></a>ページ生成</h3><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post "hello_world"</span><br></pre></td></tr></tbody></table></figure><p>hello_worldというポストを作成します。</p><p>これ紛らわしいんですが<br>postは投稿<br>pageは固定ページになっています。</p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new diary --path diary/2020-01-01</span><br></pre></td></tr></tbody></table></figure><p>/scaffoldsのdiary.mdをもとに<br>/source/_posts/diary/2020-01-01.mdを作成します。</p><p>ポストが大きくなるときは、–pathを設定することである特定のディレクトリにファイルを作成することができます。</p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page "tags"</span><br></pre></td></tr></tbody></table></figure><p>tagsとよばれる<code>固定ページ</code>を作成します。</p><p>diasporaのmenuに設定することで、固定ページにできます。</p><p><img src="menu.png" alt></p><p>このような部分に表示できます。</p><h3 id="ページ表示"><a href="#ページ表示" class="headerlink" title="ページ表示"></a>ページ表示</h3><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></tbody></table></figure><p>サーバーを立ててlocalhostでチェックできます。<br>このコマンドを打てば、自動で毎回js, css, mdなどもすべて毎回読み直してくれるので<br>hexo serverを何回も打つ必要はありません（僕はなんとなく打ってしまっていますが）</p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy -g</span><br></pre></td></tr></tbody></table></figure><p>ページ生成しながらデプロイします。</p><hr><h2 id="プラグイン紹介"><a href="#プラグイン紹介" class="headerlink" title="プラグイン紹介"></a>プラグイン紹介</h2><p>現在使用しているプラグインを紹介していきます。</p><figure class="highlight json hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="hljs-attr">"dependencies"</span>: {</span><br><span class="line">    <span class="hljs-attr">"hexo"</span>: <span class="hljs-string">"^4.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-asset-link"</span>: <span class="hljs-string">"^2.0.1"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-deployer-git"</span>: <span class="hljs-string">"^2.1.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-easy-tags-plugin"</span>: <span class="hljs-string">"^1.0.1"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-generator-archive"</span>: <span class="hljs-string">"^1.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-generator-category"</span>: <span class="hljs-string">"^1.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-generator-feed"</span>: <span class="hljs-string">"^2.2.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-generator-index"</span>: <span class="hljs-string">"^1.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-generator-search"</span>: <span class="hljs-string">"^2.4.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-generator-tag"</span>: <span class="hljs-string">"^1.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-github-card"</span>: <span class="hljs-string">"^1.0.3"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-inject"</span>: <span class="hljs-string">"^1.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-pdf"</span>: <span class="hljs-string">"^1.1.1"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-renderer-ejs"</span>: <span class="hljs-string">"^1.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-renderer-marked"</span>: <span class="hljs-string">"^2.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-renderer-stylus"</span>: <span class="hljs-string">"^1.1.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-server"</span>: <span class="hljs-string">"^1.0.0"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-tag-link-preview"</span>: <span class="hljs-string">"^1.2.3"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-tag-niconico"</span>: <span class="hljs-string">"^1.0.1"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-tag-soundcloud"</span>: <span class="hljs-string">"^1.0.2"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-tag-twitter"</span>: <span class="hljs-string">"^1.0.1"</span>,</span><br><span class="line">    <span class="hljs-attr">"hexo-wordcount"</span>: <span class="hljs-string">"^6.0.1"</span>,</span><br><span class="line">    <span class="hljs-attr">"object-assign"</span>: <span class="hljs-string">"^4.1.1"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="hexo-github-card"><a href="#hexo-github-card" class="headerlink" title="hexo-github-card"></a><a href="https://github.com/Gisonrg/hexo-github-card" target="_blank" rel="noopener">hexo-github-card</a></h3><p>GitHub Cardを表示するリポジトリのようです。</p><div style="text-align: center">  <div class="github-card" data-user="ganariya" data-repo data-height="200" data-width="400" data-theme="default" data-target data-client-id data-client-secret></div></div><script src="/github-card-lib/githubcard.js"></script><p>設定は以下のようです。　</p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% githubCard user:your_user [repo:your_repo] [width:400] [height:200] [theme:default] [client_id:your_client_id] [client_secret:your_client_secret] [align:text-align_position] %}</span><br></pre></td></tr></tbody></table></figure><h3 id="hexo-pdf"><a href="#hexo-pdf" class="headerlink" title="hexo-pdf"></a><a href="https://github.com/superalsrk/hexo-pdf" target="_blank" rel="noopener">hexo-pdf</a></h3><p>PDFを表示するプラグインです。</p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">normal</span><br><span class="line">{% pdf http://7xov2f.com1.z0.glb.clouddn.com/bash_freshman.pdf %}</span><br><span class="line"></span><br><span class="line">google drive</span><br><span class="line">{% pdf https://drive.google.com/file/d/0B6qSwdwPxPRdTEliX0dhQ2JfUEU/preview %}</span><br><span class="line"></span><br><span class="line">slideshare</span><br><span class="line">{% pdf http://www.slideshare.net/slideshow/embed_code/key/8Jl0hUt2OKUOOE %}</span><br></pre></td></tr></tbody></table></figure><h3 id="hexo-tag-link-preview"><a href="#hexo-tag-link-preview" class="headerlink" title="hexo-tag-link-preview"></a><a href="https://github.com/minamo173/hexo-tag-link-preview" target="_blank" rel="noopener">hexo-tag-link-preview</a></h3><p>URLを展開してくれるプラグインです。</p><a href="https://qiita.com/spaces/items/39a822050b6e22d35123" class="link-preview" target="_blank" rel="nofollow"><div class="link-area"><div class="og-image"><img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fcdn.qiita.com%2Fassets%2Fpublic%2Fogp-background-1150d8b18a7c15795b701a55ae908f94.png?ixlib=rb-1.2.2&w=1200&mark=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D380%26txt%3D%25E5%25B9%25B3%25E6%2588%2590%25E3%2581%25AE%25E3%2581%2586%25E3%2581%25A1%25E3%2581%25AB%25E3%2582%2584%25E3%2582%2581%25E3%2581%259F%25E3%2581%258B%25E3%2581%25A3%25E3%2581%259F%25E3%2580%258EIT%25E3%2581%25AE7%25E3%2581%25A4%25E3%2581%25AE%25E7%2584%25A1%25E6%2584%258F%25E5%2591%25B3%25E3%2581%25AA%25E7%25BF%2592%25E6%2585%25A3%25E3%2580%258F%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D54%26txt-clip%3Dellipsis%26txt-align%3Dcenter%252Cmiddle%26s%3D1d30dfd2d3f6db7aced0dcd51125bdf9&mark-align=center%2Cmiddle&blend=https%3A%2F%2Fqiita-user-contents.imgix.net%2F~text%3Fixlib%3Drb-1.2.2%26w%3D840%26h%3D500%26txt%3D%2540spaces%26txt-color%3D%2523333%26txt-font%3DAvenir-Black%26txt-size%3D45%26txt-align%3Dright%252Cbottom%26s%3Dbc1683f432e35688dd19322d95eecdd4&blend-align=center%2Cmiddle&blend-mode=normal&s=6287de88072551cd97fa9b87a42d829b"></div><div class="descriptions"><div class="og-title">平成のうちにやめたかった『ITの7つの無意味な習慣』 - Qiita</div><div class="og-description">2019年の今年は「令和元年」であるわけだが、年初はまだ「平成31年」だったので、ギリギリまだ平成ともいえる。ところで、ITの世界にもいろいろな都市伝説や根拠は薄いけれどもかっちり守られているしきたり/習慣があり、少なくとも今の世界で...</div></div></div></a><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% linkPreview https://www.amazon.com/ _blank nofollow %}</span><br></pre></td></tr></tbody></table></figure><h3 id="hexo-tag-niconico"><a href="#hexo-tag-niconico" class="headerlink" title="hexo-tag-niconico"></a><a href="https://github.com/yuichi555/hexo-tag-niconico" target="_blank" rel="noopener">hexo-tag-niconico</a></h3><p>ニコニコ動画のリンクを貼ってくれるプラグインです。</p><div><script type="text/javascript" src="http://ext.nicovideo.jp/thumb_watch/sm36035671"></script></div><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{% douga  sm36035671 %}</span><br><span class="line">{% seiga url %}</span><br><span class="line">{% nama url %}</span><br></pre></td></tr></tbody></table></figure><h3 id="hexo-tag-soundcloud"><a href="#hexo-tag-soundcloud" class="headerlink" title="hexo-tag-soundcloud"></a><a href="https://github.com/tea3/hexo-tag-soundcloud" target="_blank" rel="noopener">hexo-tag-soundcloud</a></h3><p>サウンドクラウドのリンクを貼ってくれるプラグインです。</p><div class="soundcloud-wrapper"><iframe width="100%" height="450" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A%2F%2Fsoundcloud.com%2Fnyankobrq%2Fnyankobrq-memories-free-dl&auto_play=false&hide_related=true&show_comments=true&show_user=true&show_reposts=false&visual=true"></iframe></div><h3 id="hexo-tag-twitter"><a href="#hexo-tag-twitter" class="headerlink" title="hexo-tag-twitter"></a><a href="https://github.com/tea3/hexo-tag-twitter" target="_blank" rel="noopener">hexo-tag-twitter</a></h3><p>ツイートを展開してくれるプラグインです。</p><div class="twitter-wrapper"><blockquote class="twitter-tweet"><a href="https://twitter.com/ganariya/status/1212375099380133888" target="_blank" rel="noopener"></a></blockquote></div><script async defer src="//platform.twitter.com/widgets.js" charset="utf-8"></script><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{% twitter https://twitter.com/ganariya/status/1212375099380133888 %}</span><br></pre></td></tr></tbody></table></figure><h3 id="hexo-wordcount"><a href="#hexo-wordcount" class="headerlink" title="hexo-wordcount"></a><a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a></h3><p>単語数などのカウントプラグインです。<br>まだ設定してないです。</p><h3 id="hexo-asset-link"><a href="#hexo-asset-link" class="headerlink" title="hexo-asset-link"></a><a href="https://github.com/liolok/hexo-asset-link" target="_blank" rel="noopener">hexo-asset-link</a></h3><p>markdown表記で画像をはれるプラグインです。</p><p>post_asset_folderはtrueにすると便利になります。</p><h3 id="hexo-easy-tags-plugin"><a href="#hexo-easy-tags-plugin" class="headerlink" title="hexo-easy-tags-plugin"></a><a href="https://github.com/dailyrandomphoto/hexo-easy-tags-plugin" target="_blank" rel="noopener">hexo-easy-tags-plugin</a></h3><p>タグの曖昧表記を一括にしてくれます。<br>これ便利です＞＜</p><h3 id="hexo-generator-feed"><a href="#hexo-generator-feed" class="headerlink" title="hexo-generator-feed"></a><a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a></h3><p>feed系を作成するリポジトリです。<br>これを使ってsearchページを作っています。</p><h3 id="hexo-generator-search"><a href="#hexo-generator-search" class="headerlink" title="hexo-generator-search"></a><a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></h3><p>サーチページを作るためのプラグインです。</p><p><a href="https://yoshinorin.net/2018/11/15/implement-search-feature-to-hexo/" target="_blank" rel="noopener">https://yoshinorin.net/2018/11/15/implement-search-feature-to-hexo/</a></p><p>こちらのページを参考にして、適宜バグを修正して利用させていただいています。</p><h3 id="hexo-include-markdown"><a href="#hexo-include-markdown" class="headerlink" title="hexo-include-markdown"></a><a href="https://photo-tea.com/p/17/hexo-include-markdown/" target="_blank" rel="noopener">hexo-include-markdown</a></h3><p>文章中に他のマークダウンを挿入します。<br>テンプレートエンジンのように、マークダウンを分割して使いまわして利用できます。<br>定型文やJupyterNotebookなどで利用することが考えられます。</p><p><code><!ーー md template.md ーー></code></p><p>を本文中に書くことで読み込めるようです。</p><p>読み込まれるパスは<code>source/_template/teamplate.md</code>となるため、<br>アセットをtrueにしていて、ここから読み出したいんですが、どうしましょうか･･･</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>プラグインとコマンドをまとめました。<br>適宜修正していこうと思います。</p><p>ご不明な点がありましたら、コメントいただければ幸いです！</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-01-01 diary</title>
      <link href="/2020/01/01/diary/"/>
      <url>/2020/01/01/diary/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>おじいちゃん、おばあちゃんのところに行く</li><li>PASTの復習</li><li>ブログの修正<ul><li>LaTeXが効かない　を直した</li><li>なんかうまくいかない　なんとかした</li></ul></li><li>シェルスクリプトの勉強<ul><li>まだ分かってないので明日何とかする</li></ul></li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>筑波のアパートの話を親とした</p><p>自分の今のいろいろなスキルの状態であっちに煎って大丈夫なのかなぁ<br>数学どうしようか</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>けんきう</li><li>シェルスクリプト</li><li>競プロ復習</li><li>バイト</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020の目標</title>
      <link href="/2020/01/01/aim/"/>
      <url>/2020/01/01/aim/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2020の目標をまとめます。<br>（守ろうね！）</p><hr><h2 id="生活面"><a href="#生活面" class="headerlink" title="生活面"></a>生活面</h2><ul><li>7時間寝る</li><li>二度寝は机の上で一日一回まで</li><li>Twitterは昼間しない（Slackにする）</li><li>ポモドーロで動く</li><li>娯楽は朝・昼・夜の30分に留める</li></ul><hr><h2 id="勉強面"><a href="#勉強面" class="headerlink" title="勉強面"></a>勉強面</h2><ul><li>本・動画などを最後まで継続する</li><li>毎週論文を一つ読んでブログにまとめる</li><li>ブログに学んだことをまとめる</li><li>海外の学会に2回投稿する(Acceptの有無は気にしない)</li></ul><hr><h2 id="競プロ"><a href="#競プロ" class="headerlink" title="競プロ"></a>競プロ</h2><ul><li>黄色になる</li><li>Streakを毎日つなぐ</li><li>解けた問題 ＋1問多く復習する</li><li>二回目解くときは他の人のコードを参考にする</li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 目標 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAST1過去問参加記</title>
      <link href="/2020/01/01/past1/"/>
      <url>/2020/01/01/past1/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://atcoder.jp/contests/past201912-open/tasks" target="_blank" rel="noopener">PAST1</a>に出ました、<br>以下に各問題の感想・解説などを書いていきます。</p><p>詳細な解説やコードは<a href="https://scrapbox.io/ganariya/PAST1" target="_blank" rel="noopener">Scrapbox</a>にまとめています。</p><hr><h2 id="感想・解説"><a href="#感想・解説" class="headerlink" title="感想・解説"></a>感想・解説</h2><h3 id="A"><a href="#A" class="headerlink" title="A"></a>A</h3><p>isdigitなどで判定します。<br>stoiなどを使うと0を含んでいても整数にしてくれるので楽です。</p><p>もしコーディングを自分でやる場合は</p><figure class="highlight c++ hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">d = <span class="hljs-number">0</span></span><br><span class="line"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i < N; i++){</span><br><span class="line">    d *= <span class="hljs-number">10</span>;</span><br><span class="line">    d += S[i] - <span class="hljs-string">'0'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>みたいにするといいです。</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>forで判定をします。</p><h3 id="C"><a href="#C" class="headerlink" title="C"></a>C</h3><p>ソートをして３番めを出力します。</p><h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><p>カウントします。<br>ちょっと実装が面倒というかやりたくない><</p><h3 id="E"><a href="#E" class="headerlink" title="E"></a>E</h3><p>これ難しい。</p><p>実際にコーディングすればいいが、単純に頭が疲れる。</p><p>これ普段競技プログラミングやっている人ならいいけど、初めての人結構大変そうだなぁ･･･</p><p>あと、自分自身にフォローすることが、普通に実装すると発生するので<br>出力時にチェックしよう（2敗）</p><h3 id="F"><a href="#F" class="headerlink" title="F"></a>F</h3><p>カウント構文をします。<br>海外だとtwo-pointersなどと呼ばれているものです。</p><p>sort関数でソートすると楽です。<br>ただ、小文字で判定しないといけないため、<br>transform(s.begin(), s.end(), s.begin(), ::lower)などとすれば簡単に小文字にできます。</p><h3 id="G"><a href="#G" class="headerlink" title="G"></a>G</h3><p>$N$人を$3$グループに分ける問題です。<br>（分けたあとは簡単なので）</p><p>分け方の全探索は２通りあります。</p><p>一通り目は、DFSをすればよいです。<br>DFSをすると、$O(3^N)$で計算できます。</p><p>２つ目は、3進数を使えばいいです。<br>ただ、3進数はそのまま使えないため、4進数を使えばいいです。</p><p>$N$個の要素を3つに分けるならば、$2\times N$個で$2$進数をすればいいです。</p><h3 id="H"><a href="#H" class="headerlink" title="H"></a>H</h3><p>これ一番むずかしい＞＜</p><p>解けません。</p><p>全種類販売だけなら、なんとかなりますが、奇数が出てくるとセグ木でなぐれないので辛い。</p><p>2通り解法があるっぽい。</p><p>まず、多くの人がやっているのが奇数・偶数それぞれに対して</p><ul><li>奇数または偶数番目での、最小値</li><li>奇数または偶数番目での、これまでにセットとして販売した枚数</li></ul><p>とすればよい。</p><p>最小値だけ持っていれば、売れるかどうかを判定できるため、これをチェックすれば良い。</p><p>また<a href="https://qiita.com/mikecat_mixc/items/" target="_blank" rel="noopener">https://qiita.com/mikecat_mixc/items/</a>　さんの解法であったのが<br>先に奇数番目が来るように写像するやり方。<br>これ応用効きそうでいいなぁになる。</p><h3 id="I"><a href="#I" class="headerlink" title="I"></a>I</h3><p>最近ABCで出た問題。</p><p>$N=10$の部品が全部揃うように、いい感じにセットを買い揃える問題。<br>部品のならびはビット演算でできるため</p><p><code>bit[i][j] = i番目までのセットを用いて、商品jの並びを作るような最小コスト</code><br>とすればよい。</p><h3 id="J"><a href="#J" class="headerlink" title="J"></a>J</h3><p>$HW$個のマス目の左下から右下にいどうして、その後右上に移動するときの<br>最小コストを求める問題。</p><p>この問題の難しい点は、左下から右下に移動したときに利用したマスは<br>再利用しても追加コストがかからない点である。</p><p>そこで、全探索をする意識を持って、各マスを中継場所として<br>左下、右下、右上からダイクストラする。</p><p>二回多く数えているため、中継場所のコストだけ引いてあげれば、これらの最小値が答え。</p><h3 id="K"><a href="#K" class="headerlink" title="K"></a>K</h3><p>最小共通祖先かオイラーツアーで解ける。</p><p>最小共通祖先のほうが、直感的そう＞＜（僕がそうなので）</p><h3 id="L"><a href="#L" class="headerlink" title="L"></a>L</h3><p>小さい塔と大きい塔があり、大きい塔は必ず連結成分にしたい。</p><p>ここで、もし小さい塔を利用するなら、小さい塔も連結成分になることがわかる。<br>よって、どの小さい塔を利用するかを全探索する。<br>あとはクラスカル方をする。</p><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><p>これわからなかった、平均値の最大化は二分探索らしい。</p><p>$\sum B_x / \sum A_x$の最大化をしたいため、この最大値を$p$として二分探索する。</p><p>式変形すると</p><p>$\sum (B_x - A_x \times p) \geq 0$</p><p>となるため、$B_x - A_x \times p$の大きい順から利用するGreedyで、$p$以上になるか調べれば良い。</p><h3 id="N-O"><a href="#N-O" class="headerlink" title="N, O"></a>N, O</h3><p>まだ分かってない、必ず復習する</p><hr><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>最初のほうは、プログラムを作れ　、など普段競技プログラミングやってない人向けなんだなぁって思った</p><p>後半難しいというか、実装がめんどくせ〜〜ってものが多い印象。</p><p>上級が取れなかったので残念＞＜</p><p>（途中で色々とサイト自体の修正をしていたので、途中で書いている口調が変わってしまっている･･･）</p><h2 id="他の人の解説・感想"><a href="#他の人の解説・感想" class="headerlink" title="他の人の解説・感想"></a>他の人の解説・感想</h2><ul><li><a href="http://sigma1113.hatenablog.com/entry/2019/12/31/010739" target="_blank" rel="noopener">http://sigma1113.hatenablog.com/entry/2019/12/31/010739</a></li><li><a href="https://qiita.com/mikecat_mixc/items/e7dcf78904858ab31bb1#m-%E3%81%8A%E3%81%BE%E3%81%8B%E3%81%9B--auto-choice" target="_blank" rel="noopener">https://qiita.com/mikecat_mixc/items/e7dcf78904858ab31bb1#m-%E3%81%8A%E3%81%BE%E3%81%8B%E3%81%9B--auto-choice</a></li><li><a href="https://rsk0315.hatenablog.com/entry/2019/12/29/051900" target="_blank" rel="noopener">https://rsk0315.hatenablog.com/entry/2019/12/29/051900</a></li><li><a href="https://ngtkana.hatenablog.com/entry/2019/12/30/180226" target="_blank" rel="noopener">https://ngtkana.hatenablog.com/entry/2019/12/30/180226</a></li></ul></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 競技プログラミング </tag>
            
            <tag> AtCoder </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一年の振り返りとか</title>
      <link href="/2019/12/31/review/"/>
      <url>/2019/12/31/review/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2019年も終わりに近づいています。<br>今年は特に時間の流れが早かったような気がします。</p><p>年を重ねるにつれて、一年があっという間に感じるのはおっさんくさくなったなぁ<br>という気分になりますね･･･</p><p>さて、今年も終わるので恒例の（？）一年振り返りをしていきます。<br>正直あっという間すぎて何も覚えていないですが･･･</p><hr><h2 id="競技プログラミング"><a href="#競技プログラミング" class="headerlink" title="競技プログラミング"></a>競技プログラミング</h2><p>今年は、二回のオンサイトに出ることができました。</p><h3 id="AtCoder"><a href="#AtCoder" class="headerlink" title="AtCoder"></a>AtCoder</h3><p>昨年から競技プログラミングを始め、2018年のうちに水色になり<br>そして、今年ようやく青色になることができました。<br>400点を埋めて水色に<br>500点を埋め始める＋Codeforcesの底上げで青色になれたイメージです。</p><p><img src="/2019/12/31/review/atcoder.png" alt></p><h3 id="Codeforces"><a href="#Codeforces" class="headerlink" title="Codeforces"></a>Codeforces</h3><p>また、Codeforcesも回数だけは多く出ていて<br>今年は初めて紫色になれました。</p><h3 id="界隈への不安"><a href="#界隈への不安" class="headerlink" title="界隈への不安"></a>界隈への不安</h3><p>最近、競プロ界隈自体が非常に賑わっており</p><ul><li>青パフォも安定して取れない</li><li>たまに取れても黄色少し下</li></ul><p>のような感じになっています。</p><p>相対的に自分が成長できていない感じです。</p><p>強くなるためには、もっと精進しないとですね･･･</p><h3 id="オンサイト"><a href="#オンサイト" class="headerlink" title="オンサイト"></a>オンサイト</h3><p>今年は二回のオンサイトに行くことができました。</p><p><a href="http://ganariya.hatenablog.com/entry/2019/09/29/210909" target="_blank" rel="noopener">第一回日本最強プログラマー学生選手権決勝 参加記 ガナリヤ</a><br><a href="http://ganariya.hatenablog.com/entry/2019/12/15/210608" target="_blank" rel="noopener">第二回全国統一プログラミング王決定戦　参加記</a></p><p><img src="https://cdn-ak.f.st-hatena.com/images/fotolife/g/ganariya/20190929/20190929204524.jpg" alt></p><p>などでまとめているので見てみてください＞＜</p><hr><h2 id="大学院入試"><a href="#大学院入試" class="headerlink" title="大学院入試"></a>大学院入試</h2><p>今年あったビッグイベントとして、大学院入試がありました。</p><h3 id="お気持ち"><a href="#お気持ち" class="headerlink" title="お気持ち"></a>お気持ち</h3><p>研究をするなら</p><ul><li>アルゴリズム</li><li>最適化</li><li>AI(人工知能)</li><li>自然系</li></ul><p>をやりたいなぁというお気持ちが去年から生えていました。</p><p>完全に競プロが日常生活の思考にも影響を出しています。</p><p>これらのことをやりたいなぁ〜というのを探していると<br><code>群知能</code>と呼ばれる生物の動きをもとに最適化を行う学問があることを知りました。<br>はえ＾〜おもしろそぉ＾〜<br>という軽い気持ちでこの分野の研究に手を出すことにしました。</p><h3 id="入試"><a href="#入試" class="headerlink" title="入試"></a>入試</h3><p>大学院入試ですが、外部大学院を受験しました。</p><p>大学内にやりたい研究ができる研究室がなかったのと<br>より自分よりもハイパー強い人しかいない大学に行きたいなぁというお気持ちが生えたためです。</p><p>推薦入試というものを受け、落ちるかなぁと思っていたら合格しました（本当に落ちると思っていた）</p><h3 id="精神的障害"><a href="#精神的障害" class="headerlink" title="精神的障害"></a>精神的障害</h3><p>現在、大学院進学が、自分で外部を受験しながら非常に怖くなっています。</p><p>僕は、数学がうんちです。<br>物理や科学もひとなみにうんちです。<br>そんななか、筑波大学院にいっても大丈夫なのかなぁというお気持ちになっています。</p><p>また、一番ネックなのが、今の研究室でも自分の研究テーマとは違うことを専門としていて<br>来年の研究室でも自分の研究テーマとは違うことを専門としています。<br>完全に自分の独学で研究を行う必要があるため、外の知っている人間からすると「ごみ〜〜〜〜」な研究の可能性もあります。</p><p>事実今やっている研究は「ごみ〜〜〜〜〜」になっています。</p><p>自分なんかが入って大丈夫なのかなぁ･･･こわい</p><hr><h2 id="何もしていない"><a href="#何もしていない" class="headerlink" title="何もしていない"></a>何もしていない</h2><p>今振り返っていて気づいていたんですが<br>今年はほとんど</p><ul><li>競技プログラミング</li><li>院試勉強（線形代数　積分はできないので捨て　ちなみに線形代数もできない）</li><li>けんきゅう（これはしょうもない研究をしているので　けんきゅう）</li></ul><p>ぐらいしかしてない･･･です。</p><p>去年はゲーム作ったり、競プロ始めたり、趣味でアプリ作ったりができていましたが<br>今年は競プロとけんきゅうで時間がほどんど持ってかれてました。</p><p>Twitterを見てると、強い人がものすごい本の量読んでいて<br>どう読んでいるんだろうなぁになってしまいます…。</p><p>来年はなんかしないとなぁ</p><hr><h2 id="今年の反省"><a href="#今年の反省" class="headerlink" title="今年の反省"></a>今年の反省</h2><p>今年は</p><ul><li>甘い</li><li>緩い</li><li>ガバガバダディ</li></ul><p>な生き方だったような気がします。</p><p>特にその原因は<code>にじさんじ</code>に出会ってしまったことかなぁと思います。</p><p>大量の配信、切り抜き、その他諸々</p><p>意思の弱い自分には強すぎるコンテンツであり、見るのを途中で我慢することができないマンになっていました。<br>来年は自分の意思を強くもって、動画を見る時間をむちゃくちゃ減らしたいと思います。<br>逆に、動画以外の例えばゲームとか外にでるとか、そういう娯楽は今年は一切していないため、<br>Youtube/NicoNicoを控えていこうと思います。</p><p><img src="https://nijisanji.ichikara.co.jp/wp-content/uploads/elementor/thumbs/_%E3%83%98%E3%82%99%E3%83%BC%E3%82%B9%E7%AB%8B%E3%81%A1%E7%B5%B5-e1546935743613-o2bvtgeq5ar0t1dwmf16cdhuk4ep9nnhxcwwa5z6ky.png" alt></p><hr><h2 id="来年の目標"><a href="#来年の目標" class="headerlink" title="来年の目標"></a>来年の目標</h2><h3 id="生活面"><a href="#生活面" class="headerlink" title="生活面"></a>生活面</h3><p>来年は、大学院も始まるのでより一層勉強を頑張らないとなぁとなっています。</p><p>特に、研究とか考えることがさっぱりできない非合理的ゴミ人間なので、生活習慣や意思表示がもっとできるようにならないとなぁになっています。</p><ul><li>7時間毎日寝る</li><li>朝・昼・夜の30分だけの娯楽にする</li><li>Twitterの時間を決める</li><li>ポモドーロで動く</li></ul><p>小学生かな？</p><h3 id="勉強面"><a href="#勉強面" class="headerlink" title="勉強面"></a>勉強面</h3><p>勉強というか研究というか授業というか<br>やらないといけないことが無茶苦茶増えて、レベルについていけるように必死になれば目標成功だと思います（頭が悪いので）</p><ul><li>本は最後まで読む</li><li>朝・昼・夜の30分だけの娯楽にする(２回め)</li><li>毎週一個論文読んでまとめる（-> GitHub + Scrapbox）</li><li>ブログを充実させる </li></ul><p>本も読まないとなぁ</p><p>勉強分野は</p><ul><li>Linux(いい加減シェルスクリプト覚えろ)</li><li>群知能</li><li>人工知能(強化学習)</li><li>アルゴリズム</li></ul><p>かなぁ（自分に向いているとは思えないが･･･）</p><h3 id="競プロ"><a href="#競プロ" class="headerlink" title="競プロ"></a>競プロ</h3><p>来年は、黄色になりたいです。</p><p>おそらく今の青色も結構危険で界隈が強くなるスピードのほうが早いため、逆に水入りの可能性のほうが高いです。<br>時間をみつけて、ちゃんと解いて、まとめて、黄色になれるよう精進していきたいです。</p><ul><li>黄色になる</li><li>解けた + 1問　解けなかった問題を解く（解ける問題ばかり解いてても強くなれない）</li><li>必ず自分より上の順位の人のコードを、二回目解く時は参考にする</li></ul><hr><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>来年からかなり精神的につらい日々が来るんだろうなぁと思います。<br>（教授などの先生方とは、体も心もつながってないし、人間思った以上に他人を気にしていないと割り切っちゃえばいいんですが･･･）</p><p>でも、決めた道なのでがんばろうかなと思います。</p><p>競プロの復習でもしようと思います。</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 目標 </tag>
            
            <tag> 振り返り </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>initialize</title>
      <link href="/2019/12/29/initialize/"/>
      <url>/2019/12/29/initialize/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>ガナリヤです。</p><p>新しくブログをGitHub Pagesではじめました。<br>いろいろなことをまとめていければと思います><</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> 無分類 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
