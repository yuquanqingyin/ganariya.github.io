<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ganariya&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ganariya.github.io/"/>
  <updated>2020-02-16T11:37:45.007Z</updated>
  <id>http://ganariya.github.io/</id>
  
  <author>
    <name>ganariya</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>デジタル社会革命がもたらすもの 組織や個人はどう生きるべきか 内容</title>
    <link href="http://ganariya.github.io/2020/02/16/digital_social/"/>
    <id>http://ganariya.github.io/2020/02/16/digital_social/</id>
    <published>2020-02-16T11:22:09.000Z</published>
    <updated>2020-02-16T11:37:45.007Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="http://www.akitacci.or.jp/cciwp/wp-content/uploads/%E6%A1%88%E5%86%85%E3%83%81%E3%83%A9%E3%82%B71223.pdf" target="_blank" rel="noopener">http://www.akitacci.or.jp/cciwp/wp-content/uploads/%E6%A1%88%E5%86%85%E3%83%81%E3%83%A9%E3%82%B71223.pdf</a></p><p>これに出ました。<br>せっかく大学にお金を払っていて将来的に全額親に返すので<br>とりあえず出ました。</p><p>最近はとりあえず行動したほうがいいことが多いので</p><p><a href="https://www.dbic.jp/people/nishino/" target="_blank" rel="noopener">https://www.dbic.jp/people/nishino/</a><br>西野さんの経歴はここにまとまっていた。</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>講演会の内容は、ほぼ会社などの経営者向けだった。<br>ただ、受講している多くの高齢者は寝ていたりしていて、メモを撮る人間のほうが少なかった。</p><p>何パーセントが実際に今回の講演をもとに行動を始めるんだろうな･･･とは思った。</p><p>若い人が来たほうが良かったんじゃないだろうか･･･<br>こういうので多いのは結局こういうのを見に来ても下の人間に伝わらず、自分だけの知識にして終わり<br>などがある気がする</p><p>いやだなぁ<br>会社に行ったって、年取っている人が多くの金をせしめて、どう運営するかよりはどう今の環境を保守するかを中心に考えている気がする<br>完全にそう思い込んでいるだけなので、そうではないと思うが（思いたい）</p><h2 id="日本は最悪"><a href="#日本は最悪" class="headerlink" title="日本は最悪"></a>日本は最悪</h2><p>一時間半のうち、大部分がきちんと日本はまずいということを強く主張していた。</p><p>日本のテレビや新聞はこういうのを一切伝えないし、<br>日本はこういい！日本の良いところ世界自慢みたいなテレビが絶えない</p><p>いつまでこういう日本がトップレベルにあるみたいな話があるんだろうか</p><p>西野さんの発言で気になったのは</p><p>五感と思考力を身に着けよう、というものだった。<br>日本の教育は</p><ul><li>答えを先生が教える</li><li>点がもらえればいい</li></ul><p>という教育方針で、スウェーデンとはまったくもって方針が違うらしい。<br>その結果、会社のなかで与えられた仕事をただ行い、決断力のなく、五感のうすれた<br>思考力を見失った相槌マシーンができるらしい。</p><p>研究室のミーティングとかでも、個人的にはズバッと言ってほしいですが、日本人はいわないのが美徳なの大変だし、向いてないよね（いろいろと）</p><p>考える力をつけて、自分から行動できないとこれからは特にダメ（進歩が思っている１０倍早いので）</p><h2 id="日本ではどうしていくべきか"><a href="#日本ではどうしていくべきか" class="headerlink" title="日本ではどうしていくべきか"></a>日本ではどうしていくべきか</h2><ul><li>五感を使って考える</li><li>「作業」ではなく「創造」をする</li><li>大きい視点で見て細部を気にしない</li><li>悪口・忖度をやめた大人になる</li><li>自分で考えて行動する</li></ul><p>全体的には、考えて五感で様々な環境を感じ取って行動しようという内容だった。<br>悪口や忖度なども世界的にみてダメなので、大人として考えよう</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>環境って大きいなぁって思った。<br>多くの家庭・学校、いろいろなものが環境によって左右されて<br>その環境で人間の考え方が決まる。</p><p>そうするといつまでも日本にいると、考え方が凝り固まるんだなぁってなってしまった。</p><p>考える力とか行動力ってどう身につくんだろうなぁ･･･</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.akitacci.or.jp/cc
      
    
    </summary>
    
    
    
      <category term="講演会" scheme="http://ganariya.github.io/tags/%E8%AC%9B%E6%BC%94%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>2020-02-11</title>
    <link href="http://ganariya.github.io/2020/02/11/2020-02-11/"/>
    <id>http://ganariya.github.io/2020/02/11/2020-02-11/</id>
    <published>2020-02-11T12:26:44.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>ゲーム理論入門本読み切る <ul><li>ガバ読み</li></ul></li><li>バイト</li><li>Streak</li><li>ゆきこだ</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>明日からPomodoroシートで頑張ってみよう</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>受け答え</li><li>シート印刷</li><li>群知能研究</li><li>ゲーム理論本</li><li>強化学習本</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-02-10</title>
    <link href="http://ganariya.github.io/2020/02/10/2020-02-10/"/>
    <id>http://ganariya.github.io/2020/02/10/2020-02-10/</id>
    <published>2020-02-10T13:04:34.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>ABCバチャ</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>うまく時間を使おう･･･<br>完璧主義をやめないと一生だめになる</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>ゲーム理論入門</li><li>CVPR実装</li><li>群知能アイディア</li><li>ゆきこだ236</li><li>競プロ復習</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-02-06</title>
    <link href="http://ganariya.github.io/2020/02/06/2020-02-06/"/>
    <id>http://ganariya.github.io/2020/02/06/2020-02-06/</id>
    <published>2020-02-06T14:21:29.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>卒論発表</li><li>Streak</li><li>バイト</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>気持ち切り替えて頑張っていこうね</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>競プロ復習</li><li>服買う</li><li>電車きっぷ買う</li><li>本買う</li><li>5時大学</li><li>追いコン</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-02-05</title>
    <link href="http://ganariya.github.io/2020/02/05/2020-02-05/"/>
    <id>http://ganariya.github.io/2020/02/05/2020-02-05/</id>
    <published>2020-02-05T12:23:43.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>発表練習</li><li>こどふぉDiv3</li><li>バイト</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>明日で工事完了です･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>工事完了です･･･</li><li>競プロ復習</li><li>強化学習</li><li>日程建てる</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-02-02</title>
    <link href="http://ganariya.github.io/2020/02/02/2020-02-02/"/>
    <id>http://ganariya.github.io/2020/02/02/2020-02-02/</id>
    <published>2020-02-02T13:59:20.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>LeetCode</li><li>バイト</li><li>駒場コン</li><li>セグ木notコン</li><li>こどふぉ616</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>競プロができなくなっている</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>Python強化学習</li><li>発表練習</li><li>LeetCode記事</li><li>駒場コン復習</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-02-01</title>
    <link href="http://ganariya.github.io/2020/02/01/2020-02-01/"/>
    <id>http://ganariya.github.io/2020/02/01/2020-02-01/</id>
    <published>2020-02-01T13:53:06.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>Python強化学習Day2</li><li>バイト</li><li>YukiCoder復習</li><li>AtCoderStreak</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>もっとうまく時間使おう<br>ちゃんとPomodoroして、それ以外はメモしよう</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>Python強化学習</li><li>LeetCode174</li><li>HackerRank1</li><li>HackerRank2</li><li>Codeforces616</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-30</title>
    <link href="http://ganariya.github.io/2020/01/30/2020-01-30/"/>
    <id>http://ganariya.github.io/2020/01/30/2020-01-30/</id>
    <published>2020-01-30T14:08:31.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>卒論修正</li><li>スライド修正</li><li>Python強化学習１</li><li>こどふぉ復習</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>怖いなぁコロナウイルス</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>発表練習</li><li>Python強化学習</li><li>先生にメールする</li><li>YukiCoder</li><li>（群知能）</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-26</title>
    <link href="http://ganariya.github.io/2020/01/26/2020-01-26/"/>
    <id>http://ganariya.github.io/2020/01/26/2020-01-26/</id>
    <published>2020-01-26T14:23:46.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>バイト</li><li>LeetCode</li><li>おばあちゃん家</li><li>こどふぉ復習</li><li>ABC153</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>今日あんまり進まなかったなぁ<br>体調も最近崩しがちなので気をつけないと･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>リポジトリ作成・修正</li><li>本進める</li><li>スライド作成</li><li>ABC復習</li><li>MT</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-25</title>
    <link href="http://ganariya.github.io/2020/01/25/2020-01-25/"/>
    <id>http://ganariya.github.io/2020/01/25/2020-01-25/</id>
    <published>2020-01-25T15:03:33.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>本実装＆Qiita投稿</li><li>バイト</li><li>競プロ復習</li><li>LeetCode</li><li>SRM</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>群知能と人工知能<br>どう覚えようかなぁ･･･</p><p>論文読んだら<br>めんどいけど必ず図や内容も作成しよう･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>本読み</li><li>バイト</li><li>LeetCode</li><li>ABC153</li><li>MMを覗く</li><li>CS188</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-24</title>
    <link href="http://ganariya.github.io/2020/01/24/2020-01-24/"/>
    <id>http://ganariya.github.io/2020/01/24/2020-01-24/</id>
    <published>2020-01-24T13:47:33.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>スライド修正</li><li>acopyプラグインなど作成・お手入れ</li><li>CS188学習</li><li>競プロ</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>強化学習などはとりあえず後回し（あっちでやればよい、あとでどう勉強すべきか聞いてみる）</p><p>とりあえず今の本を続けていこう<br>実装を必ず論文読んだらしよう（データも軽く取って図を作る　これによって力がつく）</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>本実装</li><li>CS188</li><li>競プロ復習</li><li>TCO</li><li>LeetCode</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>CS188 10/04 Bays Network</title>
    <link href="http://ganariya.github.io/2020/01/24/cs188_bays/"/>
    <id>http://ganariya.github.io/2020/01/24/cs188_bays/</id>
    <published>2020-01-24T13:32:16.000Z</published>
    <updated>2020-02-16T11:37:44.995Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p><a href="https://www.youtube.com/watch?v=T4l6ltMMcec" target="_blank" rel="noopener">https://www.youtube.com/watch?v=T4l6ltMMcec</a><br><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec13/FA18_cs188_lecture13_bayes_nets_1pp.pdf" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/assets/slides/lec13/FA18_cs188_lecture13_bayes_nets_1pp.pdf</a><br><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/</a></p><h2 id="Independence"><a href="#Independence" class="headerlink" title="Independence"></a>Independence</h2><p>$2$つの事象が独立していることを表す。</p><p>このとき</p><p>$\forall x, y \ P(x, y)=P(x)P(y)$<br>が成り立つ。<br>ベン図ならそれぞれ円が重ならない。</p><p>$x \amalg y$と表す。</p><p>これが分かることで、事象が相互作用があるのか分かる。</p><h2 id="Conditional-Independence"><a href="#Conditional-Independence" class="headerlink" title="Conditional Independence"></a>Conditional Independence</h2><p>$X$が$Z$という前提が与えられたとき$Y$と独立なとき</p><p>$\forall x, y, z \ P(x, y| z) =P(x|z)P(y|z)$<br>となればXとYは$Z$という事前条件に対して独立である。</p><p>これが分かるとよりシンプルな形で表せる。</p><h2 id="ベイズネット"><a href="#ベイズネット" class="headerlink" title="ベイズネット"></a>ベイズネット</h2><p>日本語だとベイジアンネットワークという。</p><p>確率変数をノードとして、それぞれの相互関係を有向グラフとして表す。<br>親が原因で、子が結果を表す。</p><h3 id="Notation"><a href="#Notation" class="headerlink" title="Notation"></a>Notation</h3><ul><li>Node<ul><li>変数</li></ul></li><li>Arc<ul><li>相互作用</li><li><strong>直接</strong>の相互作用があるなら線を引く</li><li>条件付き確率で表す。</li></ul></li></ul><h3 id="Semantics"><a href="#Semantics" class="headerlink" title="Semantics"></a>Semantics</h3><p>Xの確率は親の値$(a_1, ,,,, a_n)$を用いて</p><p>$P(X|a_1, …, a_n)$として、各ノードの確率が与えられる.</p><p>$P(x_1, …, x_n) = \prod_{i=1}^n P(x_i| \textit{parents}(X_i))$<br>と表される。つまり、すべてのノードで親の確率を使って自分の値を計算する（再帰っぽい）</p><h3 id="証明"><a href="#証明" class="headerlink" title="証明"></a>証明</h3><p>$P(x_1, …, x_n) = \prod_{i=1}^n P(x_i|x_1, …, x_{i-1})$</p><p>$P(x_i|x_1, …, x_{i-1}) = P(x_i|parents(x_i))$</p><p>よって、これらを結合すれば<br>$P(x_1, …, x_n) = \prod_{i=1}^n P(x_i| \textit{parents}(X_i))$<br>となる。</p><h3 id="Causality"><a href="#Causality" class="headerlink" title="Causality"></a>Causality</h3><p>因果性は成り立ってなくて良い。<br>矛盾のあるようなつなぎ方でも、確率分布は与えられるためループがなければ正しい（らしい）</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;URL&quot;&gt;&lt;a href=&quot;#URL&quot; class=&quot;headerlink&quot; title=&quot;URL&quot;&gt;&lt;/a&gt;URL&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=
      
    
    </summary>
    
    
    
      <category term="AI" scheme="http://ganariya.github.io/tags/AI/"/>
    
      <category term="CS188" scheme="http://ganariya.github.io/tags/CS188/"/>
    
  </entry>
  
  <entry>
    <title>CS188 10/02 Probablistic</title>
    <link href="http://ganariya.github.io/2020/01/24/cs188_10_02/"/>
    <id>http://ganariya.github.io/2020/01/24/cs188_10_02/</id>
    <published>2020-01-24T13:14:11.000Z</published>
    <updated>2020-02-16T11:37:44.995Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><p><a href="https://inst.eecs.berkeley.edu/~cs188/fa18/" target="_blank" rel="noopener">https://inst.eecs.berkeley.edu/~cs188/fa18/</a><br><a href="https://www.youtube.com/watch?v=sMNbLXsvRig" target="_blank" rel="noopener">https://www.youtube.com/watch?v=sMNbLXsvRig</a></p><h2 id="確率変数"><a href="#確率変数" class="headerlink" title="確率変数"></a>確率変数</h2><p>確率モデルにおける、不確定な事象を表す変数のこと。<br>普通の変数とは異なり大文字で表され、確率分布が与えられる。</p><p>確率変数は、種類ごとに特定のドメイン内の値を取る。<br>例えば、$T =$(cold, hot)などである。</p><p>ある意味、配列とも言っていい。</p><h2 id="Probability-Distribution"><a href="#Probability-Distribution" class="headerlink" title="Probability Distribution"></a>Probability Distribution</h2><p>確率分布。</p><p>それぞれの確率変数には確率がそれぞれ与えられる。<br>$P(X)$は確率変数$X$がとる確率の分布を表す。</p><p>これは事象$X$に関する確率が与えられた二次元テーブルと考えることができる。</p><p>$P(X = rain)$とかくと、確率変数$X$が$rain$のときの確率を表し<br>$P(rain)$と同義である。（自明に$X$と分かるなら省略していい、という意味）</p><h2 id="Joint-Distribution"><a href="#Joint-Distribution" class="headerlink" title="Joint Distribution"></a>Joint Distribution</h2><p>同時確率分布。</p><p>複数の確率変数$X_1, …, X_n$が同時に起こる確率を表すテーブル。<br>各確率変数が$d$個のドメインを取るとすると、$d^n$までテーブルの行が膨れ上がる。</p><p>$P(X_1, X_2, …, X_n)$は$n$個の確率変数の同時確率分布であり<br>$P(X_1=x_1, X_2=x_2, …, X_n = x_n$)はこのような変数が実際に値を取るときの確率が分かる。</p><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>事象。<br>事象に対して、確率が与えられる。</p><p>事象$E$の起こる確率は</p><p>$P(E) = \sum_{x_1, …, x_n \in E} P(x_1, …, x_N)$と表される。</p><h2 id="Marginal-Distribution"><a href="#Marginal-Distribution" class="headerlink" title="Marginal Distribution"></a>Marginal Distribution</h2><p>周辺分布。</p><p>Jointテーブルからある変数のみに着目して、テーブルのサブテーブルを切り出すこと。<br>SQLでいうWhereに近い。</p><h2 id="Conditional-Distribution"><a href="#Conditional-Distribution" class="headerlink" title="Conditional Distribution"></a>Conditional Distribution</h2><p>$P(x | y) = \frac{P(x, y)}{P(y)}$</p><h2 id="Conditional-Distribution-1"><a href="#Conditional-Distribution-1" class="headerlink" title="Conditional Distribution"></a>Conditional Distribution</h2><p>条件付き確率分布?<br>日本語のでの定義がない？</p><p>Joint Distributionから一部の条件でWhereで切り出したテーブル。</p><p>取り出したあとは、合計をとり、確率の合計が１になるように正規化する。</p><h2 id="Probablistic-Inference"><a href="#Probablistic-Inference" class="headerlink" title="Probablistic Inference"></a>Probablistic Inference</h2><p>確率はすでに与えられているものとする。</p><p>このとき、足りない確率から望んでいる確率を推論すること。</p><ul><li>Evidence Variable<ul><li>わかっている変数$E_1, …, E_k = e_1, …, e_k$</li></ul></li><li>Query Variable<ul><li>知りたい変数 $Q$</li></ul></li><li>Hidden Variable <ul><li>わかっていない変数</li></ul></li></ul><p>上記はすべてもともと$X_1,…,X_N$である。</p><p>このときの$P(Q|e_1, …, e_k)$を推論する。</p><p>これはテーブルを結合すればよい。そしてあとは正規化する。</p><h2 id="Product-Rule"><a href="#Product-Rule" class="headerlink" title="Product Rule"></a>Product Rule</h2><p>$P(y) \cdot P(x |y) = P(x, y)$</p><p>条件付き確率の式変形。</p><h2 id="Chain-Rule"><a href="#Chain-Rule" class="headerlink" title="Chain Rule"></a>Chain Rule</h2><p>微分みたいなもの。</p><p>$P(x_1,…,x_n) = P(x_1)P(x_2|x_1)P(x_3|x_1, x_2)…$</p><p>$P(x_1,…,x_n) = \prod_i P(x_i | x_1, …, x_{i-1})$</p><h2 id="ベイス"><a href="#ベイス" class="headerlink" title="ベイス"></a>ベイス</h2><p>$P(x | y) = \frac{P(x, y)}{P(y)}P(x)$</p><p>原因と結果を入れ替える。<br>結果から原因がどれぐらい起きるかを推定できる。</p></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;リンク&quot;&gt;&lt;a href=&quot;#リンク&quot; class=&quot;headerlink&quot; title=&quot;リンク&quot;&gt;&lt;/a&gt;リンク&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://inst.eecs.berkeley.edu/~
      
    
    </summary>
    
    
    
      <category term="AI" scheme="http://ganariya.github.io/tags/AI/"/>
    
      <category term="CS188" scheme="http://ganariya.github.io/tags/CS188/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-23</title>
    <link href="http://ganariya.github.io/2020/01/23/2020-01-23/"/>
    <id>http://ganariya.github.io/2020/01/23/2020-01-23/</id>
    <published>2020-01-23T14:15:21.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>VRP調べる　よくわかんない</li><li>スライド修正</li><li>バイト</li><li>Streakをつなぐ</li><li>CS188</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>VRPを明日実装する</p><p>強化学習は筑波に行ってからでいいんじゃないだろうか･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>VRP実装</li><li>スライド修正</li><li>CS188</li><li>競プロ復習</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-22</title>
    <link href="http://ganariya.github.io/2020/01/22/2020-01-22/"/>
    <id>http://ganariya.github.io/2020/01/22/2020-01-22/</id>
    <published>2020-01-22T13:35:15.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>mTSPの実装</li><li>Streak</li><li>ブログの改修</li><li>こどふぉ夜</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>何をやればいいのかわかんなくなってきたな</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>群知能論文読み + 実装</li><li>スライド修正</li><li>競プロ復習</li><li>動画勉強</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2-opt法を実装してみる</title>
    <link href="http://ganariya.github.io/2020/01/22/2_opt/"/>
    <id>http://ganariya.github.io/2020/01/22/2_opt/</id>
    <published>2020-01-22T08:36:33.000Z</published>
    <updated>2020-02-16T11:37:44.975Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>NP困難な問題の一つに巡回セールスマン問題というものがあります。</p><p>これは、$N$個の頂点を順番に訪問するときにかかる最小の移動コストを求める問題です。<br>これは全探索すると$O(N!)$かかり、とてつもない時間がかかってしまいます。（というか解けません･･･）</p><p>そこで、近似解を求める多くの手法が開発されており、その一つに<code>2-opt</code>という手法が開発されています。</p><h2 id="2-opt"><a href="#2-opt" class="headerlink" title="2-opt"></a>2-opt</h2><p>2-optは、局所探索法の一つです。<br>局所探索法とは、現在の解をより良くなるようにGreedyに改良していく手法です。<br>いわゆる<code>山登り法</code>の一つになります。</p><p>2-optでは、巡回セールスマンパスの２つの辺を選んで、移動する順番を入れ替える手法です。<br>もし、入れ替えたほうの移動のほうがより合計移動コストが小さくなるなら、Greedyに入れ替えることを繰り返します。</p><h2 id="2-optのイメージ"><a href="#2-optのイメージ" class="headerlink" title="2-optのイメージ"></a>2-optのイメージ</h2><p><img src="IMG_0374.jpg" alt></p><p>上記の画像を用いて、説明をしていきます。</p><p>ノード$i, j(i < j)$から次のエッジ$(i, i + 1)$, $(j, j + 1)$を交換することにします。<br>もし交換するなら$(i, j), (i + 1, j+1)$となるようにします。</p><p>まず、もともとのコストは<br>$distA = d(i, i+ 1), distB=d(j, j + 1)$だけ移動にかかっていました。<br>ここで、これら以外のパスのコストは、今回の2-optのスワップを行っても影響しないため考えません。</p><p>そして、もしスワップするとすれば増えるコストは<br>$distC = d(i, j), distD = d(i + 1, j + 1)$になります。</p><p>よって、もし$distA + distB > distC + distD$ならば<br>スワップをしたほうが全体のパスのコストが小さくなるためスワップするべきです。</p><p>ここで、問題になるのがスワップをそのまま行うと<br>つまり$i$が向かう次のノードを$j$に、<br>$i+1$が向かう次のノードを$j + 1$にしてしまうと、<br>途中からパスが逆流してしまいます。<br>合計コスト的には問題ないですが、できればきちんと移動パス通りに構築するべきです。</p><p>そこで、画像右のようにすることを考えます。<br>頂点$i$は$j$に向かい、そのあとは順番に$i+1$の方向へ向かって<br>$i+1$から$j+1$に向かいたいです。</p><p>これは、もともと$i, i + 1, …,j-1, j, j+1$のように移動していたのが<br>$i, j, j-1, j-2, …, i + 1, j+1$のように移動するようになっています。</p><p>これは<code>path[i + 1, j + 1)</code>の区間を反転させることと同義です。</p><p>よって、区間$[i, j + 1)$を反転させればきちんと意味のあるパスとして2-optを行うことができます。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p><a href="https://github.com/Ganariya/MTSP_ACO" target="_blank" rel="noopener">GitHubリンク</a></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> tsplib95</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">import</span> networkx <span class="hljs-keyword">as</span> nx</span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"></span><br><span class="line">problem = tsplib95.load_problem(<span class="hljs-string">'bays29.tsp'</span>)</span><br><span class="line">G = problem.get_graph()</span><br><span class="line"></span><br><span class="line">n = len(G.nodes)</span><br><span class="line"></span><br><span class="line">s = <span class="hljs-number">1</span></span><br><span class="line">v = s</span><br><span class="line">nodes = [v]</span><br><span class="line">path = []</span><br><span class="line">cost = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 最近傍法</span></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n - <span class="hljs-number">1</span>):</span><br><span class="line">    candidates = []</span><br><span class="line">    <span class="hljs-keyword">for</span> to <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):</span><br><span class="line">        <span class="hljs-keyword">if</span> to <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> nodes:</span><br><span class="line">            candidates.append((G.edges[v, to][<span class="hljs-string">'weight'</span>], to))</span><br><span class="line">    candidates.sort()</span><br><span class="line">    next_node = candidates[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]</span><br><span class="line">    cost += candidates[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]</span><br><span class="line">    nodes.append(next_node)</span><br><span class="line">    path.append((v, next_node))</span><br><span class="line">    v = next_node</span><br><span class="line">path.append((v, s))</span><br><span class="line">cost += G.edges[v, s][<span class="hljs-string">'weight'</span>]</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">_, ax = plt.subplots()</span><br><span class="line">pos = problem.display_data <span class="hljs-keyword">or</span> problem.node_coords</span><br><span class="line">nx.draw_networkx_nodes(G, pos=pos, ax=ax)</span><br><span class="line">nx.draw_networkx_labels(G, pos=pos, labels={i: str(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(G.nodes) + <span class="hljs-number">1</span>)}, font_size=<span class="hljs-number">8</span>, font_color=<span class="hljs-string">'white'</span>)</span><br><span class="line">nx.draw_networkx_edges(G, pos=pos, edgelist=path, arrows=<span class="hljs-literal">True</span>)</span><br><span class="line">ax.tick_params(left=<span class="hljs-literal">True</span>, bottom=<span class="hljs-literal">True</span>, labelleft=<span class="hljs-literal">True</span>, labelbottom=<span class="hljs-literal">True</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 2-swap</span></span><br><span class="line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(<span class="hljs-number">10000</span>):</span><br><span class="line">    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:</span><br><span class="line">        i = random.randint(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)</span><br><span class="line">        j = random.randint(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>)</span><br><span class="line">        <span class="hljs-keyword">if</span> i != j:</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line">    <span class="hljs-keyword">if</span> i > j:</span><br><span class="line">        i, j = j, i</span><br><span class="line"></span><br><span class="line">    distA = G.edges[nodes[i], nodes[i + <span class="hljs-number">1</span>]][<span class="hljs-string">'weight'</span>]</span><br><span class="line">    distB = G.edges[nodes[j], nodes[(j + <span class="hljs-number">1</span>) % n]][<span class="hljs-string">'weight'</span>]</span><br><span class="line">    distC = G.edges[nodes[i], nodes[j]][<span class="hljs-string">'weight'</span>]</span><br><span class="line">    distD = G.edges[nodes[i + <span class="hljs-number">1</span>], nodes[(j + <span class="hljs-number">1</span>) % n]][<span class="hljs-string">'weight'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># コストが小さくなるなら</span></span><br><span class="line">    <span class="hljs-keyword">if</span> distA + distB > distC + distD:</span><br><span class="line">        print(cost, i, j, nodes[i], nodes[j])</span><br><span class="line">        nodes[i + <span class="hljs-number">1</span>:j + <span class="hljs-number">1</span>] = reversed(nodes[i + <span class="hljs-number">1</span>: j + <span class="hljs-number">1</span>])</span><br><span class="line">        cost += (distC + distD - distA - distB)</span><br><span class="line">        path = []</span><br><span class="line">        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):</span><br><span class="line">            path.append((nodes[i], nodes[(i + <span class="hljs-number">1</span>) % n]))</span><br><span class="line"></span><br><span class="line">        <span class="hljs-comment"># 描画</span></span><br><span class="line">        plt.figure()</span><br><span class="line">        _, ax = plt.subplots()</span><br><span class="line">        pos = problem.display_data <span class="hljs-keyword">or</span> problem.node_coords</span><br><span class="line">        nx.draw_networkx_nodes(G, pos=pos, ax=ax)</span><br><span class="line">        nx.draw_networkx_labels(G, pos=pos, labels={i: str(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(G.nodes) + <span class="hljs-number">1</span>)}, font_size=<span class="hljs-number">8</span>, font_color=<span class="hljs-string">'white'</span>)</span><br><span class="line">        nx.draw_networkx_edges(G, pos=pos, edgelist=path, arrows=<span class="hljs-literal">True</span>)</span><br><span class="line">        ax.tick_params(left=<span class="hljs-literal">True</span>, bottom=<span class="hljs-literal">True</span>, labelleft=<span class="hljs-literal">True</span>, labelbottom=<span class="hljs-literal">True</span>)</span><br><span class="line">        plt.show()</span><br></pre></td></tr></tbody></table></figure><p>まず、最近傍法を先に行ってよりGreedyにパスを構築し<br>NetworkXとMatplotlibで描画を行っています。</p><p>その後、2-optを実行してよりコストが小さくなるならエッジのスワップを行っています。</p><p>配列ごと反転させてよいのが非直感的ですね･･･</p></body></html>]]></content>
    
    <summary type="html">
    
      2-opt法を実装してみる
    
    </summary>
    
    
    
      <category term="ACO" scheme="http://ganariya.github.io/tags/ACO/"/>
    
      <category term="群知能" scheme="http://ganariya.github.io/tags/%E7%BE%A4%E7%9F%A5%E8%83%BD/"/>
    
      <category term="アルゴリズム" scheme="http://ganariya.github.io/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-21</title>
    <link href="http://ganariya.github.io/2020/01/21/2020-01-21/"/>
    <id>http://ganariya.github.io/2020/01/21/2020-01-21/</id>
    <published>2020-01-21T14:20:49.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>強化学習のお勉強<ul><li>方策勾配法はさっぱりですが</li><li>とりあえずSpinning Upにうつる</li><li>あとは実装だぁ〜</li></ul></li><li>mTSPのお気持ちになる<ul><li>なにこれ  </li></ul></li><li>群知能の勉強<ul><li>少しずつ実装していくしかないんだなぁ</li></ul></li><li>Streak</li><li>こどふぉ復習</li><li>バイト</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>Spinning Upをやりきれば力がつくのかな</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>Spinning Up</li><li>mTSPACO実装</li><li>競プロ復習</li><li>こどふぉDiv3夜</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li><li>バイト</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-20</title>
    <link href="http://ganariya.github.io/2020/01/20/2020-01-20/"/>
    <id>http://ganariya.github.io/2020/01/20/2020-01-20/</id>
    <published>2020-01-20T13:35:26.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>DeepLizard</li><li>卒論を読む</li><li>ABC復習</li><li>灘中コン</li><li>むずかしい･･･ </li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>群知能と人工知能を極めたいけど難しい･･･</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>強化学習本(これ絶対にやりきる　買う)</li><li>群知能実装</li><li>競プロ復習</li><li>バイト</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
  <entry>
    <title>DeepLizard Deep Q Network</title>
    <link href="http://ganariya.github.io/2020/01/20/deeplizard_q/"/>
    <id>http://ganariya.github.io/2020/01/20/deeplizard_q/</id>
    <published>2020-01-20T10:00:46.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>DeepLizardのReinforcement　Learningをやりきった。<br>途中ちょっと？な部分もあったけど、CS188の前半を見た後ならだいたい理解できた。</p><p>あとは日本語の本に入っていく感じかなぁ･･･</p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> gym</span><br><span class="line"><span class="hljs-keyword">import</span> math</span><br><span class="line"><span class="hljs-keyword">import</span> random</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple</span><br><span class="line"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> count</span><br><span class="line"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image</span><br><span class="line"><span class="hljs-keyword">import</span> torch</span><br><span class="line"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn</span><br><span class="line"><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim</span><br><span class="line"><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F</span><br><span class="line"><span class="hljs-keyword">import</span> torchvision.transforms <span class="hljs-keyword">as</span> T</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">is_ipython = <span class="hljs-string">'inline'</span> <span class="hljs-keyword">in</span> matplotlib.get_backend()</span><br><span class="line"><span class="hljs-keyword">if</span> is_ipython: <span class="hljs-keyword">from</span> IPython <span class="hljs-keyword">import</span> display</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DQN</span><span class="hljs-params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, img_height, img_width)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.fc1 = nn.Linear(in_features=img_height * img_width * <span class="hljs-number">3</span>, out_features=<span class="hljs-number">24</span>)</span><br><span class="line">        self.fc2 = nn.Linear(in_features=<span class="hljs-number">24</span>, out_features=<span class="hljs-number">32</span>)</span><br><span class="line">        self.out = nn.Linear(in_features=<span class="hljs-number">32</span>, out_features=<span class="hljs-number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">forward</span><span class="hljs-params">(self, t)</span>:</span></span><br><span class="line">        t = t.flatten(start_dim=<span class="hljs-number">1</span>)</span><br><span class="line">        t = F.relu(self.fc1(t))</span><br><span class="line">        t = F.relu(self.fc2(t))</span><br><span class="line">        t = self.out(t)</span><br><span class="line">        <span class="hljs-keyword">return</span> t</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">Experience = namedtuple(<span class="hljs-string">'Experience'</span>, (<span class="hljs-string">'state'</span>, <span class="hljs-string">'action'</span>, <span class="hljs-string">'next_state'</span>, <span class="hljs-string">'reward'</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">e = Experience(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># capacityが蓄えるメモリ数</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReplayMemory</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, capacity)</span>:</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.memory = []</span><br><span class="line">        self.push_count = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, experience)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> len(self.memory) < self.capacity:</span><br><span class="line">            self.memory.append(experience)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            self.memory[self.push_count % self.capacity] = experience</span><br><span class="line">        self.push_count += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sample</span><span class="hljs-params">(self, batch_size)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> random.sample(self.memory, batch_size)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">can_provide_sample</span><span class="hljs-params">(self, batch_size)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> len(self.memory) >= batch_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EpsilonGreedyStrategy</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, start, end, decay)</span>:</span></span><br><span class="line">        self.start = start</span><br><span class="line">        self.end = end</span><br><span class="line">        self.decay = decay</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_exploration_rate</span><span class="hljs-params">(self, current)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.end + (self.start - self.end) * math.exp(<span class="hljs-number">-1</span> * current * self.decay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">eps = EpsilonGreedyStrategy(<span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.01</span>)</span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):</span><br><span class="line">    print(i, eps.get_exploration_rate(i))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Agent</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, strategy, num_actions, device)</span>:</span></span><br><span class="line">        self.current_step = <span class="hljs-number">0</span></span><br><span class="line">        self.strategy = strategy</span><br><span class="line">        self.num_actions = num_actions</span><br><span class="line">        self.device = device</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select_action</span><span class="hljs-params">(self, state, policy_net)</span>:</span></span><br><span class="line">        rate = self.strategy.get_exploration_rate(self.current_step)</span><br><span class="line">        self.current_step += <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> rate > random.random():</span><br><span class="line">            action = random.randrange(self.num_actions)</span><br><span class="line">            <span class="hljs-keyword">return</span> torch.tensor([action]).to(self.device)</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">with</span> torch.no_grad():</span><br><span class="line">                <span class="hljs-keyword">return</span> policy_net(state).argmax(dim=<span class="hljs-number">1</span>).to(self.device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># CartPoleEnvManager</span></span><br><span class="line"><span class="hljs-comment"># 環境を内包し、画像処理なども行う</span></span><br><span class="line"><span class="hljs-comment"># インターフェイスがクリーンになる</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CartPoleEnvManager</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, device)</span>:</span></span><br><span class="line">        self.device = device</span><br><span class="line">        self.env = gym.make(<span class="hljs-string">'CartPole-v0'</span>).unwrapped</span><br><span class="line">        self.env.reset()</span><br><span class="line">        self.current_screen = <span class="hljs-literal">None</span></span><br><span class="line">        self.done = <span class="hljs-literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reset</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.env.reset()</span><br><span class="line">        self.current_screen = <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">close</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        self.env.close()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># numpy arrayが帰ってくる？</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">render</span><span class="hljs-params">(self, mode=<span class="hljs-string">'human'</span>)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.env.render(mode)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">num_actions_available</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.env.action_space.n</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">take_action</span><span class="hljs-params">(self, action)</span>:</span></span><br><span class="line">        _, reward, self.done, _ = self.env.step(action.item())</span><br><span class="line">        <span class="hljs-keyword">return</span> torch.tensor([reward], device=self.device)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">just_starting</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> self.current_screen <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_state</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> self.just_starting() <span class="hljs-keyword">or</span> self.done:</span><br><span class="line">            self.current_screen = self.get_processed_screen()</span><br><span class="line">            black_screen = torch.zeros_like(self.current_screen)</span><br><span class="line">            <span class="hljs-keyword">return</span> black_screen</span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            s1 = self.current_screen</span><br><span class="line">            s2 = self.get_processed_screen()</span><br><span class="line">            self.current_screen = s2</span><br><span class="line">            <span class="hljs-keyword">return</span> s2 - s1</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_screen_height</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        screen = self.get_processed_screen()</span><br><span class="line">        <span class="hljs-keyword">return</span> screen.shape[<span class="hljs-number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_screen_width</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        screen = self.get_processed_screen()</span><br><span class="line">        <span class="hljs-keyword">return</span> screen.shape[<span class="hljs-number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_processed_screen</span><span class="hljs-params">(self)</span>:</span></span><br><span class="line">        screen = self.render(<span class="hljs-string">'rgb_array'</span>).transpose((<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))  <span class="hljs-comment"># PyTorch expects CHW</span></span><br><span class="line">        screen = self.crop_screen(screen)</span><br><span class="line">        <span class="hljs-keyword">return</span> self.transform_screen_data(screen)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">crop_screen</span><span class="hljs-params">(self, screen)</span>:</span></span><br><span class="line">        screen_height = screen.shape[<span class="hljs-number">1</span>]</span><br><span class="line"></span><br><span class="line">        top = int(screen_height * <span class="hljs-number">0.4</span>)</span><br><span class="line">        bottom = int(screen_height * <span class="hljs-number">0.8</span>)</span><br><span class="line">        screen = screen[:, top:bottom, :]</span><br><span class="line">        <span class="hljs-keyword">return</span> screen</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transform_screen_data</span><span class="hljs-params">(self, screen)</span>:</span></span><br><span class="line">        screen = np.ascontiguousarray(screen, dtype=np.float32) / <span class="hljs-number">255</span></span><br><span class="line">        screen = torch.from_numpy(screen)</span><br><span class="line"></span><br><span class="line">        resize = T.Compose([</span><br><span class="line">            T.ToPILImage(),</span><br><span class="line">            T.Resize((<span class="hljs-number">40</span>, <span class="hljs-number">90</span>)),</span><br><span class="line">            T.ToTensor()</span><br><span class="line">        ])</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> resize(screen).unsqueeze(<span class="hljs-number">0</span>).to(self.device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">device = torch.device(<span class="hljs-string">'cuda'</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">'cpu'</span>)</span><br><span class="line">em = CartPoleEnvManager(device)</span><br><span class="line">em.reset()</span><br><span class="line">screen = em.render(<span class="hljs-string">'rgb_array'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">screen = em.get_processed_screen()</span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(screen.squeeze(<span class="hljs-number">0</span>).permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).cpu(), interpolation=<span class="hljs-string">'none'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">screen = em.get_state()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(screen.squeeze(<span class="hljs-number">0</span>).permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).cpu(), interpolation=<span class="hljs-string">'none'</span>)</span><br><span class="line">plt.title(<span class="hljs-string">'Starting state example'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">5</span>):</span><br><span class="line">    em.take_action(torch.tensor([<span class="hljs-number">1</span>]))</span><br><span class="line">screen = em.get_state()</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.imshow(screen.squeeze(<span class="hljs-number">0</span>).permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>).cpu(), interpolation=<span class="hljs-string">'none'</span>)</span><br><span class="line">plt.title(<span class="hljs-string">'Non starting state example'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">plot</span><span class="hljs-params">(values, moving_avg_period)</span>:</span></span><br><span class="line">    plt.figure(<span class="hljs-number">2</span>)</span><br><span class="line">    plt.clf()</span><br><span class="line">    plt.title(<span class="hljs-string">'Training...'</span>)</span><br><span class="line">    plt.xlabel(<span class="hljs-string">'Episode'</span>)</span><br><span class="line">    plt.ylabel(<span class="hljs-string">'Duration'</span>)</span><br><span class="line">    plt.plot(values)</span><br><span class="line"></span><br><span class="line">    moving_avg = get_moving_average(moving_avg_period, values)</span><br><span class="line">    plt.plot(moving_avg)</span><br><span class="line">    plt.pause(<span class="hljs-number">0.001</span>)</span><br><span class="line">    print(<span class="hljs-string">"Episode"</span>, len(values), <span class="hljs-string">"\n"</span>, \</span><br><span class="line">          moving_avg_period, <span class="hljs-string">"episode moving avg:"</span>, moving_avg[<span class="hljs-number">-1</span>])</span><br><span class="line">    <span class="hljs-keyword">if</span> is_ipython: display.clear_output(wait=<span class="hljs-literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_moving_average</span><span class="hljs-params">(period, values)</span>:</span></span><br><span class="line">    values = torch.tensor(values, dtype=torch.float)</span><br><span class="line">    <span class="hljs-keyword">if</span> len(values) >= period:</span><br><span class="line">        moving_avg = values.unfold(dimension=<span class="hljs-number">0</span>, size=period, step=<span class="hljs-number">1</span>) \</span><br><span class="line">            .mean(dim=<span class="hljs-number">1</span>).flatten(start_dim=<span class="hljs-number">0</span>)</span><br><span class="line">        moving_avg = torch.cat((torch.zeros(period - <span class="hljs-number">1</span>), moving_avg))</span><br><span class="line">        <span class="hljs-keyword">return</span> moving_avg.numpy()</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        moving_avg = torch.zeros(len(values))</span><br><span class="line">        <span class="hljs-keyword">return</span> moving_avg.numpy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">plot(np.random.rand(<span class="hljs-number">300</span>), <span class="hljs-number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line">batch_size = <span class="hljs-number">256</span></span><br><span class="line">gamma = <span class="hljs-number">0.999</span></span><br><span class="line">eps_start = <span class="hljs-number">1</span></span><br><span class="line">eps_end = <span class="hljs-number">0.01</span></span><br><span class="line">eps_decay = <span class="hljs-number">0.001</span></span><br><span class="line">target_update = <span class="hljs-number">10</span></span><br><span class="line">memory_size = <span class="hljs-number">100000</span></span><br><span class="line">lr = <span class="hljs-number">0.001</span></span><br><span class="line">num_episodes = <span class="hljs-number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">device = <span class="hljs-string">'cpu'</span></span><br><span class="line">em = CartPoleEnvManager(device)</span><br><span class="line">strategy = EpsilonGreedyStrategy(eps_start, eps_end, eps_decay)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">agent = Agent(strategy, em.num_actions_available(), device)</span><br><span class="line">memory = ReplayMemory(memory_size)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">policy_net = DQN(em.get_screen_height(), em.get_screen_width())</span><br><span class="line">target_net = DQN(em.get_screen_height(), em.get_screen_width())</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">## 重みとバイアスのコピー</span></span><br><span class="line">target_net.load_state_dict(policy_net.state_dict())</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># 評価にして訓練しない</span></span><br><span class="line">target_net.eval()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">optimizer = optim.Adam(params=policy_net.parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line">episode_durations = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extract_tensors</span><span class="hljs-params">(experiences)</span>:</span></span><br><span class="line">    <span class="hljs-comment"># Convert batch of Experiences to Experience of batches</span></span><br><span class="line">    batch = Experience(*zip(*experiences))</span><br><span class="line"></span><br><span class="line">    t1 = torch.cat(batch.state)</span><br><span class="line">    t2 = torch.cat(batch.action)</span><br><span class="line">    t3 = torch.cat(batch.reward)</span><br><span class="line">    t4 = torch.cat(batch.next_state)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> (t1, t2, t3, t4)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QValues</span><span class="hljs-params">()</span>:</span></span><br><span class="line">    device = <span class="hljs-string">'cpu'</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># q-valueを返す</span></span><br><span class="line"><span class="hljs-meta">    @staticmethod</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_current</span><span class="hljs-params">(policy_net, states, actions)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">return</span> policy_net(states).gather(dim=<span class="hljs-number">1</span>, index=actions.unsqueeze(<span class="hljs-number">-1</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-meta">    @staticmethod</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_next</span><span class="hljs-params">(target_net, next_states)</span>:</span></span><br><span class="line">        final_state_locations = next_states.flatten(start_dim=<span class="hljs-number">1</span>) \</span><br><span class="line">            .max(dim=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>].eq(<span class="hljs-number">0</span>).type(torch.bool)</span><br><span class="line">        non_final_state_locations = (final_state_locations == <span class="hljs-literal">False</span>)</span><br><span class="line">        non_final_states = next_states[non_final_state_locations]</span><br><span class="line">        batch_size = next_states.shape[<span class="hljs-number">0</span>]</span><br><span class="line">        values = torch.zeros(batch_size).to(QValues.device)</span><br><span class="line">        values[non_final_state_locations] = target_net(non_final_states).max(dim=<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>].detach()</span><br><span class="line">        <span class="hljs-keyword">return</span> values</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> episode <span class="hljs-keyword">in</span> range(num_episodes):</span><br><span class="line">    em.reset()</span><br><span class="line">    state = em.get_state()</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">for</span> timestep <span class="hljs-keyword">in</span> count():</span><br><span class="line">        action = agent.select_action(state, policy_net)</span><br><span class="line">        reward = em.take_action(action)</span><br><span class="line">        next_state = em.get_state()</span><br><span class="line">        memory.push(Experience(state, action, next_state, reward))</span><br><span class="line">        state = next_state</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> memory.can_provide_sample(batch_size):</span><br><span class="line">            experiences = memory.sample(batch_size)</span><br><span class="line">            states, actions, rewards, next_states = extract_tensors(experiences)</span><br><span class="line">            current_q_values = QValues.get_current(policy_net, states, actions)</span><br><span class="line">            next_q_values = QValues.get_next(target_net, next_states)</span><br><span class="line">            target_q_values = (next_q_values * gamma) + rewards</span><br><span class="line"></span><br><span class="line">            loss = F.mse_loss(current_q_values, target_q_values.unsqueeze(<span class="hljs-number">1</span>))</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> em.done:</span><br><span class="line">            episode_durations.append(timestep)</span><br><span class="line">            plot(episode_durations, <span class="hljs-number">100</span>)</span><br><span class="line">            <span class="hljs-keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> episode % target_update == <span class="hljs-number">0</span>:</span><br><span class="line">        target_net.load_state_dict(policy_net.state_dict())</span><br><span class="line"></span><br><span class="line">em.close()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment"># %%</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;DeepLizardのReinforcement　Learningをやりきった。&lt;br&gt;途中ちょっと？な部分もあったけど、CS188の前半を見た後ならだいたい理解できた。&lt;/p&gt;
&lt;p&gt;あとは日本語の本に入っていく感じかなぁ
      
    
    </summary>
    
    
    
      <category term="AI" scheme="http://ganariya.github.io/tags/AI/"/>
    
      <category term="DeepLizard" scheme="http://ganariya.github.io/tags/DeepLizard/"/>
    
  </entry>
  
  <entry>
    <title>2020-01-19</title>
    <link href="http://ganariya.github.io/2020/01/19/2020-01-19/"/>
    <id>http://ganariya.github.io/2020/01/19/2020-01-19/</id>
    <published>2020-01-19T11:45:14.000Z</published>
    <updated>2020-02-16T11:37:45.003Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="やった"><a href="#やった" class="headerlink" title="やった"></a>やった</h2><ul><li>バイト</li><li>LeetCode<ul><li>これまじ？</li><li>問題がつらい</li><li>丁寧につくってくれな</li></ul></li><li>ABC</li><li>こどふぉ</li></ul><h2 id="おきもち"><a href="#おきもち" class="headerlink" title="おきもち"></a>おきもち</h2><p>体調が悪いのでよく寝た</p><h2 id="あした-5つまで"><a href="#あした-5つまで" class="headerlink" title="あした (5つまで)"></a>あした (5つまで)</h2><ul><li>DeepLizard</li><li>論文読み</li><li>競プロ復習</li><li>群知能</li></ul><h2 id="ていじょうぎょうむ"><a href="#ていじょうぎょうむ" class="headerlink" title="ていじょうぎょうむ"></a>ていじょうぎょうむ</h2><ul><li>Streak</li></ul></body></html>]]></content>
    
    <summary type="html">
    
      diary
    
    </summary>
    
    
    
      <category term="diary" scheme="http://ganariya.github.io/tags/diary/"/>
    
  </entry>
  
</feed>
